// Space scenario class implementations

// Automatically generated by schema2cpp - DO NOT EDIT!

#include <QtXml>
#include "staschema.h"

// ScenarioParticipantType
ScenarioParticipantType::ScenarioParticipantType()
{
}

ScenarioParticipantType* ScenarioParticipantType::create(const QDomElement& e)
{
    ScenarioParticipantType* v;
    if (e.tagName() == "tns:ParticipantType")
    {
        v = new ScenarioParticipantType;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    if (e.tagName() == "tns:GroundStation")
        return ScenarioGroundStation::create(e);
    if (e.tagName() == "tns:LaunchPad")
        return ScenarioLaunchPad::create(e);
    if (e.tagName() == "tns:Point")
        return ScenarioPoint::create(e);
    if (e.tagName() == "tns:LV")
        return ScenarioLV::create(e);
    if (e.tagName() == "tns:SC")
        return ScenarioSC::create(e);
    return NULL;
}

bool ScenarioParticipantType::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
        m_Name = (next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioParticipantType::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("ParticipantType");
    {
        QDomElement child = doc.createElement("Name");
        child.appendChild(doc.createTextNode(convertToString(m_Name)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioOptVarDouble
ScenarioOptVarDouble::ScenarioOptVarDouble() :
    m_min(0.0),
    m_value(0.0),
    m_max(0.0)
{
}

ScenarioOptVarDouble* ScenarioOptVarDouble::create(const QDomElement& e)
{
    ScenarioOptVarDouble* v;
    if (e.tagName() == "tns:OptVarDouble")
    {
        v = new ScenarioOptVarDouble;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioOptVarDouble::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
    if (next->tagName() == "tns:min")
    {
        m_min = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    }
        m_value = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    if (next->tagName() == "tns:max")
    {
        m_max = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    }
    return true;
}

QDomElement ScenarioOptVarDouble::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("OptVarDouble");
    {
        QDomElement child = doc.createElement("min");
        child.appendChild(doc.createTextNode(convertToString(m_min)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("value");
        child.appendChild(doc.createTextNode(convertToString(m_value)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("max");
        child.appendChild(doc.createTextNode(convertToString(m_max)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioOptVarInt
ScenarioOptVarInt::ScenarioOptVarInt() :
    m_value(0)
{
}

ScenarioOptVarInt* ScenarioOptVarInt::create(const QDomElement& e)
{
    ScenarioOptVarInt* v;
    if (e.tagName() == "tns:OptVarInt")
    {
        v = new ScenarioOptVarInt;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioOptVarInt::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
    if (next->tagName() == "tns:list")
    {
        m_list = parseIntList(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    }
        m_value = parseInt(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioOptVarInt::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("OptVarInt");
    {
        QDomElement child = doc.createElement("list");
        child.appendChild(doc.createTextNode(convertToString(m_list)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("value");
        child.appendChild(doc.createTextNode(convertToString(m_value)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioOptVarBool
ScenarioOptVarBool::ScenarioOptVarBool()
{
}

ScenarioOptVarBool* ScenarioOptVarBool::create(const QDomElement& e)
{
    ScenarioOptVarBool* v;
    if (e.tagName() == "tns:OptVarBool")
    {
        v = new ScenarioOptVarBool;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioOptVarBool::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
        m_value = parseBoolean(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioOptVarBool::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("OptVarBool");
    {
        QDomElement child = doc.createElement("value");
        child.appendChild(doc.createTextNode(convertToString(m_value)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioOptVarString
ScenarioOptVarString::ScenarioOptVarString()
{
}

ScenarioOptVarString* ScenarioOptVarString::create(const QDomElement& e)
{
    ScenarioOptVarString* v;
    if (e.tagName() == "tns:OptVarString")
    {
        v = new ScenarioOptVarString;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioOptVarString::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
    if (next->tagName() == "tns:list")
    {
        m_list = parseStringList(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    }
        m_value = (next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioOptVarString::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("OptVarString");
    {
        QDomElement child = doc.createElement("list");
        child.appendChild(doc.createTextNode(convertToString(m_list)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("value");
        child.appendChild(doc.createTextNode(convertToString(m_value)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioTimeLine
ScenarioTimeLine::ScenarioTimeLine() :
    m_StepTime(0.0)
{
}

ScenarioTimeLine* ScenarioTimeLine::create(const QDomElement& e)
{
    ScenarioTimeLine* v;
    if (e.tagName() == "tns:TimeLine")
    {
        v = new ScenarioTimeLine;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioTimeLine::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
        m_StartTime = parseDateTime(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_StepTime = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    if (next->tagName() == "tns:EndTime")
    {
        m_EndTime = parseDateTime(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    }
    return true;
}

QDomElement ScenarioTimeLine::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("TimeLine");
    {
        QDomElement child = doc.createElement("StartTime");
        child.appendChild(doc.createTextNode(convertToString(m_StartTime)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("StepTime");
        child.appendChild(doc.createTextNode(convertToString(m_StepTime)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("EndTime");
        child.appendChild(doc.createTextNode(convertToString(m_EndTime)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioPropagation
ScenarioPropagation::ScenarioPropagation()
{
}

ScenarioPropagation* ScenarioPropagation::create(const QDomElement& e)
{
    ScenarioPropagation* v;
    if (e.tagName() == "tns:Propagation")
    {
        v = new ScenarioPropagation;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioPropagation::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
        m_propagator = (next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioPropagation::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("Propagation");
    {
        QDomElement child = doc.createElement("propagator");
        child.appendChild(doc.createTextNode(convertToString(m_propagator)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioEnvironmentType
ScenarioEnvironmentType::ScenarioEnvironmentType()
{
}

ScenarioEnvironmentType* ScenarioEnvironmentType::create(const QDomElement& e)
{
    ScenarioEnvironmentType* v;
    if (e.tagName() == "tns:EnvironmentType")
    {
        v = new ScenarioEnvironmentType;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    if (e.tagName() == "tns:SCEnvironmentType")
        return ScenarioSCEnvironmentType::create(e);
    return NULL;
}

bool ScenarioEnvironmentType::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
    m_CentralBody = QSharedPointer<ScenarioCentralBodyType>(ScenarioCentralBodyType::create(*next));
    *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioEnvironmentType::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("EnvironmentType");
    if (!m_CentralBody.isNull())
    {
        QDomElement child = m_CentralBody->toDomElement(doc);
        child.setTagName("CentralBody");
        e.appendChild(child);
    }
    return e;
}




// ScenarioCentralBodyType
ScenarioCentralBodyType::ScenarioCentralBodyType()
{
}

ScenarioCentralBodyType* ScenarioCentralBodyType::create(const QDomElement& e)
{
    ScenarioCentralBodyType* v;
    if (e.tagName() == "tns:CentralBodyType")
    {
        v = new ScenarioCentralBodyType;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioCentralBodyType::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
    m_GravityModel = QSharedPointer<ScenarioGravityModel>(ScenarioGravityModel::create(*next));
    *next = next->nextSiblingElement();
    if (next->tagName() == "tns:atmosphere")
    {
        m_atmosphere = (next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    }
    if (next->tagName() == "tns:ellipticity")
    {
        m_ellipticity = parseBoolean(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    }
    return true;
}

QDomElement ScenarioCentralBodyType::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("CentralBodyType");
    if (!m_GravityModel.isNull())
    {
        QDomElement child = m_GravityModel->toDomElement(doc);
        child.setTagName("GravityModel");
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("atmosphere");
        child.appendChild(doc.createTextNode(convertToString(m_atmosphere)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("ellipticity");
        child.appendChild(doc.createTextNode(convertToString(m_ellipticity)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioGravityModel
ScenarioGravityModel::ScenarioGravityModel() :
    m_numberOfZonals(0),
    m_numberOfTesserals(0)
{
}

ScenarioGravityModel* ScenarioGravityModel::create(const QDomElement& e)
{
    ScenarioGravityModel* v;
    if (e.tagName() == "tns:GravityModel")
    {
        v = new ScenarioGravityModel;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioGravityModel::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
        m_modelName = (next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_numberOfZonals = parseInt(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_numberOfTesserals = parseInt(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioGravityModel::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("GravityModel");
    {
        QDomElement child = doc.createElement("modelName");
        child.appendChild(doc.createTextNode(convertToString(m_modelName)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("numberOfZonals");
        child.appendChild(doc.createTextNode(convertToString(m_numberOfZonals)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("numberOfTesserals");
        child.appendChild(doc.createTextNode(convertToString(m_numberOfTesserals)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioAbstract3DOFPositionType
ScenarioAbstract3DOFPositionType::ScenarioAbstract3DOFPositionType()
{
}

ScenarioAbstract3DOFPositionType* ScenarioAbstract3DOFPositionType::create(const QDomElement& e)
{
    ScenarioAbstract3DOFPositionType* v;
    if (e.tagName() == "tns:Abstract3DOFPositionType")
    {
        v = new ScenarioAbstract3DOFPositionType;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    if (e.tagName() == "tns:GroundPositionType")
        return ScenarioGroundPositionType::create(e);
    return NULL;
}

bool ScenarioAbstract3DOFPositionType::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
    return true;
}

QDomElement ScenarioAbstract3DOFPositionType::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("Abstract3DOFPositionType");
    return e;
}




// ScenarioAbstract6DOFPositionType
ScenarioAbstract6DOFPositionType::ScenarioAbstract6DOFPositionType()
{
}

ScenarioAbstract6DOFPositionType* ScenarioAbstract6DOFPositionType::create(const QDomElement& e)
{
    ScenarioAbstract6DOFPositionType* v;
    if (e.tagName() == "tns:Abstract6DOFPositionType")
    {
        v = new ScenarioAbstract6DOFPositionType;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    if (e.tagName() == "tns:StateVectorType")
        return ScenarioStateVectorType::create(e);
    if (e.tagName() == "tns:KeplerianElementsType")
        return ScenarioKeplerianElementsType::create(e);
    if (e.tagName() == "tns:SphericalCoordinatesType")
        return ScenarioSphericalCoordinatesType::create(e);
    return NULL;
}

bool ScenarioAbstract6DOFPositionType::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
    return true;
}

QDomElement ScenarioAbstract6DOFPositionType::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("Abstract6DOFPositionType");
    return e;
}




// ScenarioGroundPositionType
ScenarioGroundPositionType::ScenarioGroundPositionType() :
    m_latitude(0.0),
    m_longitude(0.0),
    m_altitude(0.0)
{
}

ScenarioGroundPositionType* ScenarioGroundPositionType::create(const QDomElement& e)
{
    ScenarioGroundPositionType* v;
    if (e.tagName() == "tns:GroundPositionType")
    {
        v = new ScenarioGroundPositionType;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioGroundPositionType::load(const QDomElement& e, QDomElement* next)
{
    ScenarioAbstract3DOFPositionType::load(e, next);
        m_latitude = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_longitude = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_altitude = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioGroundPositionType::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioAbstract3DOFPositionType::toDomElement(doc);
    e.setTagName("GroundPositionType");
    {
        QDomElement child = doc.createElement("latitude");
        child.appendChild(doc.createTextNode(convertToString(m_latitude)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("longitude");
        child.appendChild(doc.createTextNode(convertToString(m_longitude)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("altitude");
        child.appendChild(doc.createTextNode(convertToString(m_altitude)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioStateVectorType
ScenarioStateVectorType::ScenarioStateVectorType() :
    m_x(0.0),
    m_y(0.0),
    m_z(0.0),
    m_vx(0.0),
    m_vy(0.0),
    m_vz(0.0)
{
}

ScenarioStateVectorType* ScenarioStateVectorType::create(const QDomElement& e)
{
    ScenarioStateVectorType* v;
    if (e.tagName() == "tns:StateVectorType")
    {
        v = new ScenarioStateVectorType;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioStateVectorType::load(const QDomElement& e, QDomElement* next)
{
    ScenarioAbstract6DOFPositionType::load(e, next);
        m_x = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_y = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_z = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_vx = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_vy = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_vz = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioStateVectorType::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioAbstract6DOFPositionType::toDomElement(doc);
    e.setTagName("StateVectorType");
    {
        QDomElement child = doc.createElement("x");
        child.appendChild(doc.createTextNode(convertToString(m_x)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("y");
        child.appendChild(doc.createTextNode(convertToString(m_y)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("z");
        child.appendChild(doc.createTextNode(convertToString(m_z)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("vx");
        child.appendChild(doc.createTextNode(convertToString(m_vx)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("vy");
        child.appendChild(doc.createTextNode(convertToString(m_vy)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("vz");
        child.appendChild(doc.createTextNode(convertToString(m_vz)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioKeplerianElementsType
ScenarioKeplerianElementsType::ScenarioKeplerianElementsType() :
    m_semiMajorAxis(0.0),
    m_eccentricity(0.0),
    m_inclination(0.0),
    m_RAAN(0.0),
    m_argumentOfPeriapsis(0.0),
    m_trueAnomaly(0.0)
{
}

ScenarioKeplerianElementsType* ScenarioKeplerianElementsType::create(const QDomElement& e)
{
    ScenarioKeplerianElementsType* v;
    if (e.tagName() == "tns:KeplerianElementsType")
    {
        v = new ScenarioKeplerianElementsType;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioKeplerianElementsType::load(const QDomElement& e, QDomElement* next)
{
    ScenarioAbstract6DOFPositionType::load(e, next);
        m_semiMajorAxis = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_eccentricity = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_inclination = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_RAAN = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_argumentOfPeriapsis = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_trueAnomaly = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioKeplerianElementsType::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioAbstract6DOFPositionType::toDomElement(doc);
    e.setTagName("KeplerianElementsType");
    {
        QDomElement child = doc.createElement("semiMajorAxis");
        child.appendChild(doc.createTextNode(convertToString(m_semiMajorAxis)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("eccentricity");
        child.appendChild(doc.createTextNode(convertToString(m_eccentricity)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("inclination");
        child.appendChild(doc.createTextNode(convertToString(m_inclination)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("RAAN");
        child.appendChild(doc.createTextNode(convertToString(m_RAAN)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("argumentOfPeriapsis");
        child.appendChild(doc.createTextNode(convertToString(m_argumentOfPeriapsis)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("trueAnomaly");
        child.appendChild(doc.createTextNode(convertToString(m_trueAnomaly)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioSphericalCoordinatesType
ScenarioSphericalCoordinatesType::ScenarioSphericalCoordinatesType() :
    m_radialDistance(0.0),
    m_longitude(0.0),
    m_latitude(0.0),
    m_flightPathVelocity(0.0),
    m_flightPathAngle(0.0),
    m_headingAngle(0.0)
{
}

ScenarioSphericalCoordinatesType* ScenarioSphericalCoordinatesType::create(const QDomElement& e)
{
    ScenarioSphericalCoordinatesType* v;
    if (e.tagName() == "tns:SphericalCoordinatesType")
    {
        v = new ScenarioSphericalCoordinatesType;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioSphericalCoordinatesType::load(const QDomElement& e, QDomElement* next)
{
    ScenarioAbstract6DOFPositionType::load(e, next);
        m_radialDistance = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_longitude = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_latitude = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_flightPathVelocity = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_flightPathAngle = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_headingAngle = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioSphericalCoordinatesType::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioAbstract6DOFPositionType::toDomElement(doc);
    e.setTagName("SphericalCoordinatesType");
    {
        QDomElement child = doc.createElement("radialDistance");
        child.appendChild(doc.createTextNode(convertToString(m_radialDistance)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("longitude");
        child.appendChild(doc.createTextNode(convertToString(m_longitude)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("latitude");
        child.appendChild(doc.createTextNode(convertToString(m_latitude)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("flightPathVelocity");
        child.appendChild(doc.createTextNode(convertToString(m_flightPathVelocity)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("flightPathAngle");
        child.appendChild(doc.createTextNode(convertToString(m_flightPathAngle)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("headingAngle");
        child.appendChild(doc.createTextNode(convertToString(m_headingAngle)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioAbstract6DOFAttitudeType
ScenarioAbstract6DOFAttitudeType::ScenarioAbstract6DOFAttitudeType()
{
}

ScenarioAbstract6DOFAttitudeType* ScenarioAbstract6DOFAttitudeType::create(const QDomElement& e)
{
    ScenarioAbstract6DOFAttitudeType* v;
    if (e.tagName() == "tns:Abstract6DOFAttitudeType")
    {
        v = new ScenarioAbstract6DOFAttitudeType;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    if (e.tagName() == "tns:EulerBLVLHType")
        return ScenarioEulerBLVLHType::create(e);
    if (e.tagName() == "tns:EulerBIType")
        return ScenarioEulerBIType::create(e);
    if (e.tagName() == "tns:qBLVLHType")
        return ScenarioqBLVLHType::create(e);
    if (e.tagName() == "tns:qBIType")
        return ScenarioqBIType::create(e);
    return NULL;
}

bool ScenarioAbstract6DOFAttitudeType::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
    return true;
}

QDomElement ScenarioAbstract6DOFAttitudeType::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("Abstract6DOFAttitudeType");
    return e;
}




// ScenarioEulerBLVLHType
ScenarioEulerBLVLHType::ScenarioEulerBLVLHType() :
    m_phi(0.0),
    m_theta(0.0),
    m_psi(0.0),
    m_phiDot(0.0),
    m_thetaDot(0.0),
    m_psiDot(0.0)
{
}

ScenarioEulerBLVLHType* ScenarioEulerBLVLHType::create(const QDomElement& e)
{
    ScenarioEulerBLVLHType* v;
    if (e.tagName() == "tns:EulerBLVLHType")
    {
        v = new ScenarioEulerBLVLHType;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioEulerBLVLHType::load(const QDomElement& e, QDomElement* next)
{
    ScenarioAbstract6DOFAttitudeType::load(e, next);
        m_phi = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_theta = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_psi = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_phiDot = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_thetaDot = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_psiDot = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioEulerBLVLHType::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioAbstract6DOFAttitudeType::toDomElement(doc);
    e.setTagName("EulerBLVLHType");
    {
        QDomElement child = doc.createElement("phi");
        child.appendChild(doc.createTextNode(convertToString(m_phi)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("theta");
        child.appendChild(doc.createTextNode(convertToString(m_theta)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("psi");
        child.appendChild(doc.createTextNode(convertToString(m_psi)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("phiDot");
        child.appendChild(doc.createTextNode(convertToString(m_phiDot)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("thetaDot");
        child.appendChild(doc.createTextNode(convertToString(m_thetaDot)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("psiDot");
        child.appendChild(doc.createTextNode(convertToString(m_psiDot)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioEulerBIType
ScenarioEulerBIType::ScenarioEulerBIType() :
    m_phi(0.0),
    m_theta(0.0),
    m_psi(0.0),
    m_phiDot(0.0),
    m_thetaDot(0.0),
    m_psiDot(0.0)
{
}

ScenarioEulerBIType* ScenarioEulerBIType::create(const QDomElement& e)
{
    ScenarioEulerBIType* v;
    if (e.tagName() == "tns:EulerBIType")
    {
        v = new ScenarioEulerBIType;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioEulerBIType::load(const QDomElement& e, QDomElement* next)
{
    ScenarioAbstract6DOFAttitudeType::load(e, next);
        m_phi = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_theta = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_psi = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_phiDot = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_thetaDot = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_psiDot = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioEulerBIType::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioAbstract6DOFAttitudeType::toDomElement(doc);
    e.setTagName("EulerBIType");
    {
        QDomElement child = doc.createElement("phi");
        child.appendChild(doc.createTextNode(convertToString(m_phi)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("theta");
        child.appendChild(doc.createTextNode(convertToString(m_theta)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("psi");
        child.appendChild(doc.createTextNode(convertToString(m_psi)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("phiDot");
        child.appendChild(doc.createTextNode(convertToString(m_phiDot)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("thetaDot");
        child.appendChild(doc.createTextNode(convertToString(m_thetaDot)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("psiDot");
        child.appendChild(doc.createTextNode(convertToString(m_psiDot)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioqBLVLHType
ScenarioqBLVLHType::ScenarioqBLVLHType() :
    m_q1(0.0),
    m_q2(0.0),
    m_q3(0.0),
    m_q4(0.0),
    m_q1Dot(0.0),
    m_q2Dot(0.0),
    m_q3Dot(0.0),
    m_q4Dot(0.0)
{
}

ScenarioqBLVLHType* ScenarioqBLVLHType::create(const QDomElement& e)
{
    ScenarioqBLVLHType* v;
    if (e.tagName() == "tns:qBLVLHType")
    {
        v = new ScenarioqBLVLHType;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioqBLVLHType::load(const QDomElement& e, QDomElement* next)
{
    ScenarioAbstract6DOFAttitudeType::load(e, next);
        m_q1 = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_q2 = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_q3 = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_q4 = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_q1Dot = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_q2Dot = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_q3Dot = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_q4Dot = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioqBLVLHType::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioAbstract6DOFAttitudeType::toDomElement(doc);
    e.setTagName("qBLVLHType");
    {
        QDomElement child = doc.createElement("q1");
        child.appendChild(doc.createTextNode(convertToString(m_q1)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("q2");
        child.appendChild(doc.createTextNode(convertToString(m_q2)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("q3");
        child.appendChild(doc.createTextNode(convertToString(m_q3)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("q4");
        child.appendChild(doc.createTextNode(convertToString(m_q4)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("q1Dot");
        child.appendChild(doc.createTextNode(convertToString(m_q1Dot)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("q2Dot");
        child.appendChild(doc.createTextNode(convertToString(m_q2Dot)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("q3Dot");
        child.appendChild(doc.createTextNode(convertToString(m_q3Dot)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("q4Dot");
        child.appendChild(doc.createTextNode(convertToString(m_q4Dot)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioqBIType
ScenarioqBIType::ScenarioqBIType() :
    m_q1(0.0),
    m_q2(0.0),
    m_q3(0.0),
    m_q4(0.0),
    m_q1Dot(0.0),
    m_q2Dot(0.0),
    m_q3Dot(0.0),
    m_q4Dot(0.0)
{
}

ScenarioqBIType* ScenarioqBIType::create(const QDomElement& e)
{
    ScenarioqBIType* v;
    if (e.tagName() == "tns:qBIType")
    {
        v = new ScenarioqBIType;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioqBIType::load(const QDomElement& e, QDomElement* next)
{
    ScenarioAbstract6DOFAttitudeType::load(e, next);
        m_q1 = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_q2 = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_q3 = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_q4 = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_q1Dot = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_q2Dot = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_q3Dot = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_q4Dot = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioqBIType::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioAbstract6DOFAttitudeType::toDomElement(doc);
    e.setTagName("qBIType");
    {
        QDomElement child = doc.createElement("q1");
        child.appendChild(doc.createTextNode(convertToString(m_q1)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("q2");
        child.appendChild(doc.createTextNode(convertToString(m_q2)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("q3");
        child.appendChild(doc.createTextNode(convertToString(m_q3)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("q4");
        child.appendChild(doc.createTextNode(convertToString(m_q4)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("q1Dot");
        child.appendChild(doc.createTextNode(convertToString(m_q1Dot)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("q2Dot");
        child.appendChild(doc.createTextNode(convertToString(m_q2Dot)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("q3Dot");
        child.appendChild(doc.createTextNode(convertToString(m_q3Dot)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("q4Dot");
        child.appendChild(doc.createTextNode(convertToString(m_q4Dot)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioAbstract12DOFStateType
ScenarioAbstract12DOFStateType::ScenarioAbstract12DOFStateType()
{
}

ScenarioAbstract12DOFStateType* ScenarioAbstract12DOFStateType::create(const QDomElement& e)
{
    ScenarioAbstract12DOFStateType* v;
    if (e.tagName() == "tns:Abstract12DOFStateType")
    {
        v = new ScenarioAbstract12DOFStateType;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    if (e.tagName() == "tns:State12DOF")
        return ScenarioState12DOF::create(e);
    return NULL;
}

bool ScenarioAbstract12DOFStateType::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
    return true;
}

QDomElement ScenarioAbstract12DOFStateType::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("Abstract12DOFStateType");
    return e;
}




// ScenarioState12DOF
ScenarioState12DOF::ScenarioState12DOF()
{
}

ScenarioState12DOF* ScenarioState12DOF::create(const QDomElement& e)
{
    ScenarioState12DOF* v;
    if (e.tagName() == "tns:State12DOF")
    {
        v = new ScenarioState12DOF;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioState12DOF::load(const QDomElement& e, QDomElement* next)
{
    ScenarioAbstract12DOFStateType::load(e, next);
    m_Abstract6DOFPosition = QSharedPointer<ScenarioAbstract6DOFPositionType>(ScenarioAbstract6DOFPositionType::create(*next));
    *next = next->nextSiblingElement();
    m_Abstract6DOFAttitude = QSharedPointer<ScenarioAbstract6DOFAttitudeType>(ScenarioAbstract6DOFAttitudeType::create(*next));
    *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioState12DOF::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioAbstract12DOFStateType::toDomElement(doc);
    e.setTagName("State12DOF");
    if (!m_Abstract6DOFPosition.isNull())
    {
        QDomElement child = m_Abstract6DOFPosition->toDomElement(doc);
        e.appendChild(child);
    }
    if (!m_Abstract6DOFAttitude.isNull())
    {
        QDomElement child = m_Abstract6DOFAttitude->toDomElement(doc);
        e.appendChild(child);
    }
    return e;
}




// ScenarioOptimization
ScenarioOptimization::ScenarioOptimization() :
    m_nVariables(0),
    m_nObjectives(0),
    m_nConstraints(0)
{
}

ScenarioOptimization* ScenarioOptimization::create(const QDomElement& e)
{
    ScenarioOptimization* v;
    if (e.tagName() == "tns:Optimization")
    {
        v = new ScenarioOptimization;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioOptimization::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
        m_nVariables = parseInt(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_variables = parseStringList(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_variablesMatrix = parseDoubleList(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_nObjectives = parseInt(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_objectives = parseStringList(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_objectivesMatrix = parseDoubleList(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_nConstraints = parseInt(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_constraints = parseStringList(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_constraintsMatrix = parseDoubleList(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_algorithm = (next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_algorithmParameters = parseDoubleList(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioOptimization::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("Optimization");
    {
        QDomElement child = doc.createElement("nVariables");
        child.appendChild(doc.createTextNode(convertToString(m_nVariables)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("variables");
        child.appendChild(doc.createTextNode(convertToString(m_variables)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("variablesMatrix");
        child.appendChild(doc.createTextNode(convertToString(m_variablesMatrix)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("nObjectives");
        child.appendChild(doc.createTextNode(convertToString(m_nObjectives)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("objectives");
        child.appendChild(doc.createTextNode(convertToString(m_objectives)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("objectivesMatrix");
        child.appendChild(doc.createTextNode(convertToString(m_objectivesMatrix)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("nConstraints");
        child.appendChild(doc.createTextNode(convertToString(m_nConstraints)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("constraints");
        child.appendChild(doc.createTextNode(convertToString(m_constraints)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("constraintsMatrix");
        child.appendChild(doc.createTextNode(convertToString(m_constraintsMatrix)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("algorithm");
        child.appendChild(doc.createTextNode(convertToString(m_algorithm)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("algorithmParameters");
        child.appendChild(doc.createTextNode(convertToString(m_algorithmParameters)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioOutputFiles
ScenarioOutputFiles::ScenarioOutputFiles()
{
}

ScenarioOutputFiles* ScenarioOutputFiles::create(const QDomElement& e)
{
    ScenarioOutputFiles* v;
    if (e.tagName() == "tns:OutputFiles")
    {
        v = new ScenarioOutputFiles;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioOutputFiles::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
    if (next->tagName() == "tns:paretoFrontVarsFileName")
    {
        m_paretoFrontVarsFileName = (next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    }
    if (next->tagName() == "tns:paretoFrontCstrsFileName")
    {
        m_paretoFrontCstrsFileName = (next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    }
    if (next->tagName() == "tns:paretoFrontObjsFileName")
    {
        m_paretoFrontObjsFileName = (next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    }
    if (next->tagName() == "tns:geometryFileName")
    {
        m_geometryFileName = (next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    }
        m_trajPostionFileName = (next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    if (next->tagName() == "tns:trajAttitudeFileName")
    {
        m_trajAttitudeFileName = (next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    }
        m_trajMiscFileName = (next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    if (next->tagName() == "tns:successProbabilityFileName")
    {
        m_successProbabilityFileName = (next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    }
    return true;
}

QDomElement ScenarioOutputFiles::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("OutputFiles");
    {
        QDomElement child = doc.createElement("paretoFrontVarsFileName");
        child.appendChild(doc.createTextNode(convertToString(m_paretoFrontVarsFileName)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("paretoFrontCstrsFileName");
        child.appendChild(doc.createTextNode(convertToString(m_paretoFrontCstrsFileName)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("paretoFrontObjsFileName");
        child.appendChild(doc.createTextNode(convertToString(m_paretoFrontObjsFileName)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("geometryFileName");
        child.appendChild(doc.createTextNode(convertToString(m_geometryFileName)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("trajPostionFileName");
        child.appendChild(doc.createTextNode(convertToString(m_trajPostionFileName)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("trajAttitudeFileName");
        child.appendChild(doc.createTextNode(convertToString(m_trajAttitudeFileName)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("trajMiscFileName");
        child.appendChild(doc.createTextNode(convertToString(m_trajMiscFileName)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("successProbabilityFileName");
        child.appendChild(doc.createTextNode(convertToString(m_successProbabilityFileName)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioAbstractConeType
ScenarioAbstractConeType::ScenarioAbstractConeType()
{
}

ScenarioAbstractConeType* ScenarioAbstractConeType::create(const QDomElement& e)
{
    ScenarioAbstractConeType* v;
    if (e.tagName() == "tns:AbstractConeType")
    {
        v = new ScenarioAbstractConeType;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    if (e.tagName() == "tns:CircularCone")
        return ScenarioCircularCone::create(e);
    if (e.tagName() == "tns:RectangularConeType")
        return ScenarioRectangularConeType::create(e);
    if (e.tagName() == "tns:OvalConeType")
        return ScenarioOvalConeType::create(e);
    return NULL;
}

bool ScenarioAbstractConeType::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
    return true;
}

QDomElement ScenarioAbstractConeType::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("AbstractConeType");
    return e;
}




// ScenarioCircularCone
ScenarioCircularCone::ScenarioCircularCone() :
    m_coneAngle(0.0)
{
}

ScenarioCircularCone* ScenarioCircularCone::create(const QDomElement& e)
{
    ScenarioCircularCone* v;
    if (e.tagName() == "tns:CircularCone")
    {
        v = new ScenarioCircularCone;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioCircularCone::load(const QDomElement& e, QDomElement* next)
{
    ScenarioAbstractConeType::load(e, next);
        m_coneAngle = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioCircularCone::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioAbstractConeType::toDomElement(doc);
    e.setTagName("CircularCone");
    {
        QDomElement child = doc.createElement("coneAngle");
        child.appendChild(doc.createTextNode(convertToString(m_coneAngle)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioRectangularConeType
ScenarioRectangularConeType::ScenarioRectangularConeType() :
    m_coneAngle1(0.0),
    m_coneAngle2(0.0)
{
}

ScenarioRectangularConeType* ScenarioRectangularConeType::create(const QDomElement& e)
{
    ScenarioRectangularConeType* v;
    if (e.tagName() == "tns:RectangularConeType")
    {
        v = new ScenarioRectangularConeType;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioRectangularConeType::load(const QDomElement& e, QDomElement* next)
{
    ScenarioAbstractConeType::load(e, next);
        m_coneAngle1 = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_coneAngle2 = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioRectangularConeType::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioAbstractConeType::toDomElement(doc);
    e.setTagName("RectangularConeType");
    {
        QDomElement child = doc.createElement("coneAngle1");
        child.appendChild(doc.createTextNode(convertToString(m_coneAngle1)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("coneAngle2");
        child.appendChild(doc.createTextNode(convertToString(m_coneAngle2)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioOvalConeType
ScenarioOvalConeType::ScenarioOvalConeType()
{
}

ScenarioOvalConeType* ScenarioOvalConeType::create(const QDomElement& e)
{
    ScenarioOvalConeType* v;
    if (e.tagName() == "tns:OvalConeType")
    {
        v = new ScenarioOvalConeType;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioOvalConeType::load(const QDomElement& e, QDomElement* next)
{
    ScenarioAbstractConeType::load(e, next);
    return true;
}

QDomElement ScenarioOvalConeType::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioAbstractConeType::toDomElement(doc);
    e.setTagName("OvalConeType");
    return e;
}




// ScenarioAntenna
ScenarioAntenna::ScenarioAntenna()
{
}

ScenarioAntenna* ScenarioAntenna::create(const QDomElement& e)
{
    ScenarioAntenna* v;
    if (e.tagName() == "tns:Antenna")
    {
        v = new ScenarioAntenna;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    if (e.tagName() == "tns:CommunicationAntenna")
        return ScenarioCommunicationAntenna::create(e);
    if (e.tagName() == "tns:ObservationAntenna")
        return ScenarioObservationAntenna::create(e);
    return NULL;
}

bool ScenarioAntenna::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
    m_AbstractCone = QSharedPointer<ScenarioAbstractConeType>(ScenarioAbstractConeType::create(*next));
    *next = next->nextSiblingElement();
    m_PointingDirection = QSharedPointer<ScenarioPointingDirection>(ScenarioPointingDirection::create(*next));
    *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioAntenna::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("Antenna");
    if (!m_AbstractCone.isNull())
    {
        QDomElement child = m_AbstractCone->toDomElement(doc);
        e.appendChild(child);
    }
    if (!m_PointingDirection.isNull())
    {
        QDomElement child = m_PointingDirection->toDomElement(doc);
        child.setTagName("PointingDirection");
        e.appendChild(child);
    }
    return e;
}




// ScenarioPointingDirection
ScenarioPointingDirection::ScenarioPointingDirection() :
    m_azimuth(0.0),
    m_elevation(0.0),
    m_azimuthDot(0.0),
    m_elevationDot(0.0)
{
}

ScenarioPointingDirection* ScenarioPointingDirection::create(const QDomElement& e)
{
    ScenarioPointingDirection* v;
    if (e.tagName() == "tns:PointingDirection")
    {
        v = new ScenarioPointingDirection;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioPointingDirection::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
    if (next->tagName() == "tns:referenceSystem")
    {
        m_referenceSystem = (next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    }
        m_azimuth = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_elevation = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    if (next->tagName() == "tns:azimuthDot")
    {
        m_azimuthDot = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    }
    if (next->tagName() == "tns:elevationDot")
    {
        m_elevationDot = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    }
    return true;
}

QDomElement ScenarioPointingDirection::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("PointingDirection");
    {
        QDomElement child = doc.createElement("referenceSystem");
        child.appendChild(doc.createTextNode(convertToString(m_referenceSystem)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("azimuth");
        child.appendChild(doc.createTextNode(convertToString(m_azimuth)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("elevation");
        child.appendChild(doc.createTextNode(convertToString(m_elevation)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("azimuthDot");
        child.appendChild(doc.createTextNode(convertToString(m_azimuthDot)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("elevationDot");
        child.appendChild(doc.createTextNode(convertToString(m_elevationDot)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioCommunicationAntenna
ScenarioCommunicationAntenna::ScenarioCommunicationAntenna()
{
}

ScenarioCommunicationAntenna* ScenarioCommunicationAntenna::create(const QDomElement& e)
{
    ScenarioCommunicationAntenna* v;
    if (e.tagName() == "tns:CommunicationAntenna")
    {
        v = new ScenarioCommunicationAntenna;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioCommunicationAntenna::load(const QDomElement& e, QDomElement* next)
{
    ScenarioAntenna::load(e, next);
    return true;
}

QDomElement ScenarioCommunicationAntenna::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioAntenna::toDomElement(doc);
    e.setTagName("CommunicationAntenna");
    return e;
}




// ScenarioObservationAntenna
ScenarioObservationAntenna::ScenarioObservationAntenna()
{
}

ScenarioObservationAntenna* ScenarioObservationAntenna::create(const QDomElement& e)
{
    ScenarioObservationAntenna* v;
    if (e.tagName() == "tns:ObservationAntenna")
    {
        v = new ScenarioObservationAntenna;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioObservationAntenna::load(const QDomElement& e, QDomElement* next)
{
    ScenarioAntenna::load(e, next);
    return true;
}

QDomElement ScenarioObservationAntenna::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioAntenna::toDomElement(doc);
    e.setTagName("ObservationAntenna");
    return e;
}




// ScenarioLocationType
ScenarioLocationType::ScenarioLocationType()
{
}

ScenarioLocationType* ScenarioLocationType::create(const QDomElement& e)
{
    ScenarioLocationType* v;
    if (e.tagName() == "tns:LocationType")
    {
        v = new ScenarioLocationType;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioLocationType::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
        m_CentralBody = (next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    m_Abstract3DOFPosition = QSharedPointer<ScenarioAbstract3DOFPositionType>(ScenarioAbstract3DOFPositionType::create(*next));
    *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioLocationType::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("LocationType");
    {
        QDomElement child = doc.createElement("CentralBody");
        child.appendChild(doc.createTextNode(convertToString(m_CentralBody)));
        e.appendChild(child);
    }
    if (!m_Abstract3DOFPosition.isNull())
    {
        QDomElement child = m_Abstract3DOFPosition->toDomElement(doc);
        e.appendChild(child);
    }
    return e;
}




// ScenarioGroundStation
ScenarioGroundStation::ScenarioGroundStation()
{
}

ScenarioGroundStation* ScenarioGroundStation::create(const QDomElement& e)
{
    ScenarioGroundStation* v;
    if (e.tagName() == "tns:GroundStation")
    {
        v = new ScenarioGroundStation;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioGroundStation::load(const QDomElement& e, QDomElement* next)
{
    ScenarioParticipantType::load(e, next);
    m_Location = QSharedPointer<ScenarioLocationType>(ScenarioLocationType::create(*next));
    *next = next->nextSiblingElement();
    m_CommunicationAntenna = QSharedPointer<ScenarioCommunicationAntenna>(ScenarioCommunicationAntenna::create(*next));
    *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioGroundStation::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioParticipantType::toDomElement(doc);
    e.setTagName("GroundStation");
    if (!m_Location.isNull())
    {
        QDomElement child = m_Location->toDomElement(doc);
        child.setTagName("Location");
        e.appendChild(child);
    }
    if (!m_CommunicationAntenna.isNull())
    {
        QDomElement child = m_CommunicationAntenna->toDomElement(doc);
        e.appendChild(child);
    }
    return e;
}




// ScenarioLaunchPad
ScenarioLaunchPad::ScenarioLaunchPad() :
    m_clearingAltitude(0.0)
{
}

ScenarioLaunchPad* ScenarioLaunchPad::create(const QDomElement& e)
{
    ScenarioLaunchPad* v;
    if (e.tagName() == "tns:LaunchPad")
    {
        v = new ScenarioLaunchPad;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioLaunchPad::load(const QDomElement& e, QDomElement* next)
{
    ScenarioParticipantType::load(e, next);
    m_Location = QSharedPointer<ScenarioLocationType>(ScenarioLocationType::create(*next));
    *next = next->nextSiblingElement();
        m_clearingAltitude = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioLaunchPad::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioParticipantType::toDomElement(doc);
    e.setTagName("LaunchPad");
    if (!m_Location.isNull())
    {
        QDomElement child = m_Location->toDomElement(doc);
        child.setTagName("Location");
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("clearingAltitude");
        child.appendChild(doc.createTextNode(convertToString(m_clearingAltitude)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioPoint
ScenarioPoint::ScenarioPoint()
{
}

ScenarioPoint* ScenarioPoint::create(const QDomElement& e)
{
    ScenarioPoint* v;
    if (e.tagName() == "tns:Point")
    {
        v = new ScenarioPoint;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioPoint::load(const QDomElement& e, QDomElement* next)
{
    ScenarioParticipantType::load(e, next);
    m_Location = QSharedPointer<ScenarioLocation>(ScenarioLocation::create(*next));
    *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioPoint::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioParticipantType::toDomElement(doc);
    e.setTagName("Point");
    if (!m_Location.isNull())
    {
        QDomElement child = m_Location->toDomElement(doc);
        child.setTagName("Location");
        e.appendChild(child);
    }
    return e;
}




// ScenarioLocation
ScenarioLocation::ScenarioLocation()
{
}

ScenarioLocation* ScenarioLocation::create(const QDomElement& e)
{
    ScenarioLocation* v;
    if (e.tagName() == "tns:Location")
    {
        v = new ScenarioLocation;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioLocation::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
    return true;
}

QDomElement ScenarioLocation::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("Location");
    return e;
}




// ScenarioLV
ScenarioLV::ScenarioLV()
{
}

ScenarioLV* ScenarioLV::create(const QDomElement& e)
{
    ScenarioLV* v;
    if (e.tagName() == "tns:LV")
    {
        v = new ScenarioLV;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioLV::load(const QDomElement& e, QDomElement* next)
{
    ScenarioParticipantType::load(e, next);
    m_LVProgram = QSharedPointer<ScenarioLVProgram>(ScenarioLVProgram::create(*next));
    *next = next->nextSiblingElement();
    m_LVMission = QSharedPointer<ScenarioLVMission>(ScenarioLVMission::create(*next));
    *next = next->nextSiblingElement();
    m_System = QSharedPointer<ScenarioLVSystemType>(ScenarioLVSystemType::create(*next));
    *next = next->nextSiblingElement();
    m_Optimization = QSharedPointer<ScenarioOptimization>(ScenarioOptimization::create(*next));
    *next = next->nextSiblingElement();
    m_OutputFiles = QSharedPointer<ScenarioOutputFiles>(ScenarioOutputFiles::create(*next));
    *next = next->nextSiblingElement();
        m_Appearance = (next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioLV::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioParticipantType::toDomElement(doc);
    e.setTagName("LV");
    if (!m_LVProgram.isNull())
    {
        QDomElement child = m_LVProgram->toDomElement(doc);
        e.appendChild(child);
    }
    if (!m_LVMission.isNull())
    {
        QDomElement child = m_LVMission->toDomElement(doc);
        e.appendChild(child);
    }
    if (!m_System.isNull())
    {
        QDomElement child = m_System->toDomElement(doc);
        child.setTagName("System");
        e.appendChild(child);
    }
    if (!m_Optimization.isNull())
    {
        QDomElement child = m_Optimization->toDomElement(doc);
        e.appendChild(child);
    }
    if (!m_OutputFiles.isNull())
    {
        QDomElement child = m_OutputFiles->toDomElement(doc);
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("Appearance");
        child.appendChild(doc.createTextNode(convertToString(m_Appearance)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioPropulsionSystem
ScenarioPropulsionSystem::ScenarioPropulsionSystem()
{
}

ScenarioPropulsionSystem* ScenarioPropulsionSystem::create(const QDomElement& e)
{
    ScenarioPropulsionSystem* v;
    if (e.tagName() == "tns:PropulsionSystem")
    {
        v = new ScenarioPropulsionSystem;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioPropulsionSystem::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
    m_System = QSharedPointer<ScenarioSystem>(ScenarioSystem::create(*next));
    *next = next->nextSiblingElement();
    m_LiquidTanks = QSharedPointer<ScenarioLiquidTanks>(ScenarioLiquidTanks::create(*next));
if (!m_LiquidTanks.isNull())
        *next = next->nextSiblingElement();
    m_SolidGrain = QSharedPointer<ScenarioSolidGrain>(ScenarioSolidGrain::create(*next));
if (!m_SolidGrain.isNull())
        *next = next->nextSiblingElement();
    m_FeedSystem = QSharedPointer<ScenarioFeedSystem>(ScenarioFeedSystem::create(*next));
if (!m_FeedSystem.isNull())
        *next = next->nextSiblingElement();
    m_CombustionChamber = QSharedPointer<ScenarioCombustionChamber>(ScenarioCombustionChamber::create(*next));
    *next = next->nextSiblingElement();
    m_Nozzle = QSharedPointer<ScenarioNozzle>(ScenarioNozzle::create(*next));
    *next = next->nextSiblingElement();
    m_Performance = QSharedPointer<ScenarioPerformance>(ScenarioPerformance::create(*next));
    *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioPropulsionSystem::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("PropulsionSystem");
    if (!m_System.isNull())
    {
        QDomElement child = m_System->toDomElement(doc);
        child.setTagName("System");
        e.appendChild(child);
    }
    if (!m_LiquidTanks.isNull())
    {
        QDomElement child = m_LiquidTanks->toDomElement(doc);
        child.setTagName("LiquidTanks");
        e.appendChild(child);
    }
    if (!m_SolidGrain.isNull())
    {
        QDomElement child = m_SolidGrain->toDomElement(doc);
        child.setTagName("SolidGrain");
        e.appendChild(child);
    }
    if (!m_FeedSystem.isNull())
    {
        QDomElement child = m_FeedSystem->toDomElement(doc);
        child.setTagName("FeedSystem");
        e.appendChild(child);
    }
    if (!m_CombustionChamber.isNull())
    {
        QDomElement child = m_CombustionChamber->toDomElement(doc);
        child.setTagName("CombustionChamber");
        e.appendChild(child);
    }
    if (!m_Nozzle.isNull())
    {
        QDomElement child = m_Nozzle->toDomElement(doc);
        child.setTagName("Nozzle");
        e.appendChild(child);
    }
    if (!m_Performance.isNull())
    {
        QDomElement child = m_Performance->toDomElement(doc);
        child.setTagName("Performance");
        e.appendChild(child);
    }
    return e;
}




// ScenarioSystem
ScenarioSystem::ScenarioSystem() :
    m_totalEngineDryMass(0.0),
    m_engineCoGLongPosition(0.0)
{
}

ScenarioSystem* ScenarioSystem::create(const QDomElement& e)
{
    ScenarioSystem* v;
    if (e.tagName() == "tns:System")
    {
        v = new ScenarioSystem;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioSystem::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
    m_propType = QSharedPointer<ScenarioOptVarString>(ScenarioOptVarString::create(*next));
    *next = next->nextSiblingElement();
        m_fuelType = (next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_oxType = (next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    m_numberOfEngines = QSharedPointer<ScenarioOptVarInt>(ScenarioOptVarInt::create(*next));
    *next = next->nextSiblingElement();
    m_nominalThrust = QSharedPointer<ScenarioOptVarDouble>(ScenarioOptVarDouble::create(*next));
    *next = next->nextSiblingElement();
        m_totalEngineDryMass = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    m_propMass = QSharedPointer<ScenarioOptVarDouble>(ScenarioOptVarDouble::create(*next));
    *next = next->nextSiblingElement();
        m_engineCoGLongPosition = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    m_lengthOverDiam = QSharedPointer<ScenarioOptVarDouble>(ScenarioOptVarDouble::create(*next));
    *next = next->nextSiblingElement();
    m_offTheShelf = QSharedPointer<ScenarioOptVarBool>(ScenarioOptVarBool::create(*next));
    *next = next->nextSiblingElement();
    m_offTheShelfEngineType = QSharedPointer<ScenarioOptVarString>(ScenarioOptVarString::create(*next));
if (!m_offTheShelfEngineType.isNull())
        *next = next->nextSiblingElement();
    m_feedType = QSharedPointer<ScenarioOptVarString>(ScenarioOptVarString::create(*next));
if (!m_feedType.isNull())
        *next = next->nextSiblingElement();
    if (next->tagName() == "tns:coolingType")
    {
        m_coolingType = (next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    }
    m_mixtureRatio = QSharedPointer<ScenarioOptVarDouble>(ScenarioOptVarDouble::create(*next));
if (!m_mixtureRatio.isNull())
        *next = next->nextSiblingElement();
    m_nozzleOptAlt = QSharedPointer<ScenarioOptVarDouble>(ScenarioOptVarDouble::create(*next));
    *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioSystem::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("System");
    if (!m_propType.isNull())
    {
        QDomElement child = m_propType->toDomElement(doc);
        child.setTagName("propType");
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("fuelType");
        child.appendChild(doc.createTextNode(convertToString(m_fuelType)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("oxType");
        child.appendChild(doc.createTextNode(convertToString(m_oxType)));
        e.appendChild(child);
    }
    if (!m_numberOfEngines.isNull())
    {
        QDomElement child = m_numberOfEngines->toDomElement(doc);
        child.setTagName("numberOfEngines");
        e.appendChild(child);
    }
    if (!m_nominalThrust.isNull())
    {
        QDomElement child = m_nominalThrust->toDomElement(doc);
        child.setTagName("nominalThrust");
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("totalEngineDryMass");
        child.appendChild(doc.createTextNode(convertToString(m_totalEngineDryMass)));
        e.appendChild(child);
    }
    if (!m_propMass.isNull())
    {
        QDomElement child = m_propMass->toDomElement(doc);
        child.setTagName("propMass");
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("engineCoGLongPosition");
        child.appendChild(doc.createTextNode(convertToString(m_engineCoGLongPosition)));
        e.appendChild(child);
    }
    if (!m_lengthOverDiam.isNull())
    {
        QDomElement child = m_lengthOverDiam->toDomElement(doc);
        child.setTagName("lengthOverDiam");
        e.appendChild(child);
    }
    if (!m_offTheShelf.isNull())
    {
        QDomElement child = m_offTheShelf->toDomElement(doc);
        child.setTagName("offTheShelf");
        e.appendChild(child);
    }
    if (!m_offTheShelfEngineType.isNull())
    {
        QDomElement child = m_offTheShelfEngineType->toDomElement(doc);
        child.setTagName("offTheShelfEngineType");
        e.appendChild(child);
    }
    if (!m_feedType.isNull())
    {
        QDomElement child = m_feedType->toDomElement(doc);
        child.setTagName("feedType");
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("coolingType");
        child.appendChild(doc.createTextNode(convertToString(m_coolingType)));
        e.appendChild(child);
    }
    if (!m_mixtureRatio.isNull())
    {
        QDomElement child = m_mixtureRatio->toDomElement(doc);
        child.setTagName("mixtureRatio");
        e.appendChild(child);
    }
    if (!m_nozzleOptAlt.isNull())
    {
        QDomElement child = m_nozzleOptAlt->toDomElement(doc);
        child.setTagName("nozzleOptAlt");
        e.appendChild(child);
    }
    return e;
}




// ScenarioLiquidTanks
ScenarioLiquidTanks::ScenarioLiquidTanks() :
    m_oxTankLength(0.0),
    m_oxTankDiam(0.0),
    m_oxTankPressure(0.0),
    m_fuelTankLength(0.0),
    m_fuelTankDiam(0.0),
    m_fuelTankPressure(0.0)
{
}

ScenarioLiquidTanks* ScenarioLiquidTanks::create(const QDomElement& e)
{
    ScenarioLiquidTanks* v;
    if (e.tagName() == "tns:LiquidTanks")
    {
        v = new ScenarioLiquidTanks;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioLiquidTanks::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
    m_tanksPressureNorm = QSharedPointer<ScenarioOptVarDouble>(ScenarioOptVarDouble::create(*next));
    *next = next->nextSiblingElement();
        m_oxTankLength = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_oxTankDiam = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_oxTankPressure = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_fuelTankLength = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_fuelTankDiam = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_fuelTankPressure = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioLiquidTanks::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("LiquidTanks");
    if (!m_tanksPressureNorm.isNull())
    {
        QDomElement child = m_tanksPressureNorm->toDomElement(doc);
        child.setTagName("tanksPressureNorm");
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("oxTankLength");
        child.appendChild(doc.createTextNode(convertToString(m_oxTankLength)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("oxTankDiam");
        child.appendChild(doc.createTextNode(convertToString(m_oxTankDiam)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("oxTankPressure");
        child.appendChild(doc.createTextNode(convertToString(m_oxTankPressure)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("fuelTankLength");
        child.appendChild(doc.createTextNode(convertToString(m_fuelTankLength)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("fuelTankDiam");
        child.appendChild(doc.createTextNode(convertToString(m_fuelTankDiam)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("fuelTankPressure");
        child.appendChild(doc.createTextNode(convertToString(m_fuelTankPressure)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioSolidGrain
ScenarioSolidGrain::ScenarioSolidGrain() :
    m_grainLength(0.0),
    m_grainDiam(0.0),
    m_igniterLength(0.0),
    m_igniterDiam(0.0),
    m_igniterMass(0.0),
    m_sliverMass(0.0),
    m_cavityVolume(0.0)
{
}

ScenarioSolidGrain* ScenarioSolidGrain::create(const QDomElement& e)
{
    ScenarioSolidGrain* v;
    if (e.tagName() == "tns:SolidGrain")
    {
        v = new ScenarioSolidGrain;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioSolidGrain::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
        m_grainLength = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_grainDiam = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_igniterLength = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_igniterDiam = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_igniterMass = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_sliverMass = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_cavityVolume = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioSolidGrain::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("SolidGrain");
    {
        QDomElement child = doc.createElement("grainLength");
        child.appendChild(doc.createTextNode(convertToString(m_grainLength)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("grainDiam");
        child.appendChild(doc.createTextNode(convertToString(m_grainDiam)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("igniterLength");
        child.appendChild(doc.createTextNode(convertToString(m_igniterLength)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("igniterDiam");
        child.appendChild(doc.createTextNode(convertToString(m_igniterDiam)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("igniterMass");
        child.appendChild(doc.createTextNode(convertToString(m_igniterMass)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("sliverMass");
        child.appendChild(doc.createTextNode(convertToString(m_sliverMass)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("cavityVolume");
        child.appendChild(doc.createTextNode(convertToString(m_cavityVolume)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioFeedSystem
ScenarioFeedSystem::ScenarioFeedSystem() :
    m_pressurizerTankPressure(0.0),
    m_pressurizerTankRadius(0.0),
    m_pressurizerTankMass(0.0),
    m_pressurizerGasMass(0.0),
    m_linesValvesMass(0.0),
    m_trappedPropMass(0.0),
    m_totalFeedSystemMass(0.0),
    m_totalFeedSystemLength(0.0),
    m_totalFeedSystemDiameter(0.0)
{
}

ScenarioFeedSystem* ScenarioFeedSystem::create(const QDomElement& e)
{
    ScenarioFeedSystem* v;
    if (e.tagName() == "tns:FeedSystem")
    {
        v = new ScenarioFeedSystem;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioFeedSystem::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
    if (next->tagName() == "tns:pressurizerTankPressure")
    {
        m_pressurizerTankPressure = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    }
    if (next->tagName() == "tns:pressurizerTankRadius")
    {
        m_pressurizerTankRadius = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    }
    if (next->tagName() == "tns:pressurizerTankMass")
    {
        m_pressurizerTankMass = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    }
    if (next->tagName() == "tns:pressurizerGasMass")
    {
        m_pressurizerGasMass = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    }
        m_linesValvesMass = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_trappedPropMass = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_totalFeedSystemMass = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_totalFeedSystemLength = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_totalFeedSystemDiameter = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioFeedSystem::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("FeedSystem");
    {
        QDomElement child = doc.createElement("pressurizerTankPressure");
        child.appendChild(doc.createTextNode(convertToString(m_pressurizerTankPressure)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("pressurizerTankRadius");
        child.appendChild(doc.createTextNode(convertToString(m_pressurizerTankRadius)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("pressurizerTankMass");
        child.appendChild(doc.createTextNode(convertToString(m_pressurizerTankMass)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("pressurizerGasMass");
        child.appendChild(doc.createTextNode(convertToString(m_pressurizerGasMass)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("linesValvesMass");
        child.appendChild(doc.createTextNode(convertToString(m_linesValvesMass)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("trappedPropMass");
        child.appendChild(doc.createTextNode(convertToString(m_trappedPropMass)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("totalFeedSystemMass");
        child.appendChild(doc.createTextNode(convertToString(m_totalFeedSystemMass)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("totalFeedSystemLength");
        child.appendChild(doc.createTextNode(convertToString(m_totalFeedSystemLength)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("totalFeedSystemDiameter");
        child.appendChild(doc.createTextNode(convertToString(m_totalFeedSystemDiameter)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioCombustionChamber
ScenarioCombustionChamber::ScenarioCombustionChamber() :
    m_ab(0.0),
    m_acc(0.0),
    m_chamberPressure(0.0),
    m_chamberCharactLength(0.0),
    m_chamberLength(0.0),
    m_chamberDiameter(0.0),
    m_chamberMass(0.0)
{
}

ScenarioCombustionChamber* ScenarioCombustionChamber::create(const QDomElement& e)
{
    ScenarioCombustionChamber* v;
    if (e.tagName() == "tns:CombustionChamber")
    {
        v = new ScenarioCombustionChamber;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioCombustionChamber::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
    m_abOverAt = QSharedPointer<ScenarioOptVarDouble>(ScenarioOptVarDouble::create(*next));
if (!m_abOverAt.isNull())
        *next = next->nextSiblingElement();
    m_accOverAt = QSharedPointer<ScenarioOptVarDouble>(ScenarioOptVarDouble::create(*next));
if (!m_accOverAt.isNull())
        *next = next->nextSiblingElement();
    if (next->tagName() == "tns:ab")
    {
        m_ab = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    }
    if (next->tagName() == "tns:acc")
    {
        m_acc = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    }
    m_chamberPressureNorm = QSharedPointer<ScenarioOptVarDouble>(ScenarioOptVarDouble::create(*next));
    *next = next->nextSiblingElement();
        m_chamberPressure = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_chamberCharactLength = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    if (next->tagName() == "tns:chamberLength")
    {
        m_chamberLength = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    }
    if (next->tagName() == "tns:chamberDiameter")
    {
        m_chamberDiameter = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    }
    if (next->tagName() == "tns:chamberMass")
    {
        m_chamberMass = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    }
    return true;
}

QDomElement ScenarioCombustionChamber::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("CombustionChamber");
    if (!m_abOverAt.isNull())
    {
        QDomElement child = m_abOverAt->toDomElement(doc);
        child.setTagName("abOverAt");
        e.appendChild(child);
    }
    if (!m_accOverAt.isNull())
    {
        QDomElement child = m_accOverAt->toDomElement(doc);
        child.setTagName("accOverAt");
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("ab");
        child.appendChild(doc.createTextNode(convertToString(m_ab)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("acc");
        child.appendChild(doc.createTextNode(convertToString(m_acc)));
        e.appendChild(child);
    }
    if (!m_chamberPressureNorm.isNull())
    {
        QDomElement child = m_chamberPressureNorm->toDomElement(doc);
        child.setTagName("chamberPressureNorm");
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("chamberPressure");
        child.appendChild(doc.createTextNode(convertToString(m_chamberPressure)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("chamberCharactLength");
        child.appendChild(doc.createTextNode(convertToString(m_chamberCharactLength)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("chamberLength");
        child.appendChild(doc.createTextNode(convertToString(m_chamberLength)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("chamberDiameter");
        child.appendChild(doc.createTextNode(convertToString(m_chamberDiameter)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("chamberMass");
        child.appendChild(doc.createTextNode(convertToString(m_chamberMass)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioNozzle
ScenarioNozzle::ScenarioNozzle() :
    m_at(0.0),
    m_ae(0.0),
    m_aeOverat(0.0),
    m_nozzleLength(0.0),
    m_nozzleDiameter(0.0),
    m_nozzleMass(0.0),
    m_tvcMass(0.0),
    m_nozzleCantAngle(0.0)
{
}

ScenarioNozzle* ScenarioNozzle::create(const QDomElement& e)
{
    ScenarioNozzle* v;
    if (e.tagName() == "tns:Nozzle")
    {
        v = new ScenarioNozzle;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioNozzle::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
        m_at = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_ae = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_aeOverat = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_nozzleLength = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_nozzleDiameter = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_nozzleMass = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    m_nozzleType = QSharedPointer<ScenarioOptVarString>(ScenarioOptVarString::create(*next));
    *next = next->nextSiblingElement();
    m_divAngle = QSharedPointer<ScenarioOptVarDouble>(ScenarioOptVarDouble::create(*next));
    *next = next->nextSiblingElement();
    m_tvcType = QSharedPointer<ScenarioOptVarString>(ScenarioOptVarString::create(*next));
    *next = next->nextSiblingElement();
    m_tvcAngle = QSharedPointer<ScenarioOptVarDouble>(ScenarioOptVarDouble::create(*next));
    *next = next->nextSiblingElement();
        m_tvcMass = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_nozzleCantAngle = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_nozzleShape = (next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioNozzle::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("Nozzle");
    {
        QDomElement child = doc.createElement("at");
        child.appendChild(doc.createTextNode(convertToString(m_at)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("ae");
        child.appendChild(doc.createTextNode(convertToString(m_ae)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("aeOverat");
        child.appendChild(doc.createTextNode(convertToString(m_aeOverat)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("nozzleLength");
        child.appendChild(doc.createTextNode(convertToString(m_nozzleLength)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("nozzleDiameter");
        child.appendChild(doc.createTextNode(convertToString(m_nozzleDiameter)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("nozzleMass");
        child.appendChild(doc.createTextNode(convertToString(m_nozzleMass)));
        e.appendChild(child);
    }
    if (!m_nozzleType.isNull())
    {
        QDomElement child = m_nozzleType->toDomElement(doc);
        child.setTagName("nozzleType");
        e.appendChild(child);
    }
    if (!m_divAngle.isNull())
    {
        QDomElement child = m_divAngle->toDomElement(doc);
        child.setTagName("divAngle");
        e.appendChild(child);
    }
    if (!m_tvcType.isNull())
    {
        QDomElement child = m_tvcType->toDomElement(doc);
        child.setTagName("tvcType");
        e.appendChild(child);
    }
    if (!m_tvcAngle.isNull())
    {
        QDomElement child = m_tvcAngle->toDomElement(doc);
        child.setTagName("tvcAngle");
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("tvcMass");
        child.appendChild(doc.createTextNode(convertToString(m_tvcMass)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("nozzleCantAngle");
        child.appendChild(doc.createTextNode(convertToString(m_nozzleCantAngle)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("nozzleShape");
        child.appendChild(doc.createTextNode(convertToString(m_nozzleShape)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioPerformance
ScenarioPerformance::ScenarioPerformance() :
    m_theoOptIsp(0.0),
    m_realOptIsp(0.0),
    m_realSeeIsp(0.0),
    m_realVacuumIsp(0.0),
    m_thrustCoeff(0.0),
    m_charactVelocity(0.0),
    m_thrustCoeffEff(0.0),
    m_charactVelocityEff(0.0),
    m_nominalMassFlow(0.0),
    m_minOperativeAlt(0.0)
{
}

ScenarioPerformance* ScenarioPerformance::create(const QDomElement& e)
{
    ScenarioPerformance* v;
    if (e.tagName() == "tns:Performance")
    {
        v = new ScenarioPerformance;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioPerformance::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
        m_theoOptIsp = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_realOptIsp = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_realSeeIsp = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_realVacuumIsp = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_thrustCoeff = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_charactVelocity = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_thrustCoeffEff = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_charactVelocityEff = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_nominalMassFlow = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_minOperativeAlt = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    m_throttle = QSharedPointer<ScenarioOptVarBool>(ScenarioOptVarBool::create(*next));
if (!m_throttle.isNull())
        *next = next->nextSiblingElement();
    m_restart = QSharedPointer<ScenarioOptVarBool>(ScenarioOptVarBool::create(*next));
if (!m_restart.isNull())
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioPerformance::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("Performance");
    {
        QDomElement child = doc.createElement("theoOptIsp");
        child.appendChild(doc.createTextNode(convertToString(m_theoOptIsp)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("realOptIsp");
        child.appendChild(doc.createTextNode(convertToString(m_realOptIsp)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("realSeeIsp");
        child.appendChild(doc.createTextNode(convertToString(m_realSeeIsp)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("realVacuumIsp");
        child.appendChild(doc.createTextNode(convertToString(m_realVacuumIsp)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("thrustCoeff");
        child.appendChild(doc.createTextNode(convertToString(m_thrustCoeff)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("charactVelocity");
        child.appendChild(doc.createTextNode(convertToString(m_charactVelocity)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("thrustCoeffEff");
        child.appendChild(doc.createTextNode(convertToString(m_thrustCoeffEff)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("charactVelocityEff");
        child.appendChild(doc.createTextNode(convertToString(m_charactVelocityEff)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("nominalMassFlow");
        child.appendChild(doc.createTextNode(convertToString(m_nominalMassFlow)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("minOperativeAlt");
        child.appendChild(doc.createTextNode(convertToString(m_minOperativeAlt)));
        e.appendChild(child);
    }
    if (!m_throttle.isNull())
    {
        QDomElement child = m_throttle->toDomElement(doc);
        child.setTagName("throttle");
        e.appendChild(child);
    }
    if (!m_restart.isNull())
    {
        QDomElement child = m_restart->toDomElement(doc);
        child.setTagName("restart");
        e.appendChild(child);
    }
    return e;
}




// ScenarioLVProgram
ScenarioLVProgram::ScenarioLVProgram() :
    m_nLaunches(0),
    m_nYearsOps(0.0),
    m_nLaunchesPerYear(0)
{
}

ScenarioLVProgram* ScenarioLVProgram::create(const QDomElement& e)
{
    ScenarioLVProgram* v;
    if (e.tagName() == "tns:LVProgram")
    {
        v = new ScenarioLVProgram;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioLVProgram::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
        m_nLaunches = parseInt(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_nYearsOps = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_nLaunchesPerYear = parseInt(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    m_programCostFactors = QSharedPointer<ScenarioprogramCostFactors>(ScenarioprogramCostFactors::create(*next));
    *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioLVProgram::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("LVProgram");
    {
        QDomElement child = doc.createElement("nLaunches");
        child.appendChild(doc.createTextNode(convertToString(m_nLaunches)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("nYearsOps");
        child.appendChild(doc.createTextNode(convertToString(m_nYearsOps)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("nLaunchesPerYear");
        child.appendChild(doc.createTextNode(convertToString(m_nLaunchesPerYear)));
        e.appendChild(child);
    }
    if (!m_programCostFactors.isNull())
    {
        QDomElement child = m_programCostFactors->toDomElement(doc);
        child.setTagName("programCostFactors");
        e.appendChild(child);
    }
    return e;
}




// ScenarioprogramCostFactors
ScenarioprogramCostFactors::ScenarioprogramCostFactors() :
    m_f0(0.0),
    m_f1(0.0),
    m_f3(0.0),
    m_f7(0.0)
{
}

ScenarioprogramCostFactors* ScenarioprogramCostFactors::create(const QDomElement& e)
{
    ScenarioprogramCostFactors* v;
    if (e.tagName() == "tns:programCostFactors")
    {
        v = new ScenarioprogramCostFactors;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioprogramCostFactors::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
        m_f0 = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_launcherDesignComplexity = (next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_f1 = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_teamExpertise = (next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_f3 = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_contractorsStructure = (next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_f7 = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioprogramCostFactors::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("programCostFactors");
    {
        QDomElement child = doc.createElement("f0");
        child.appendChild(doc.createTextNode(convertToString(m_f0)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("launcherDesignComplexity");
        child.appendChild(doc.createTextNode(convertToString(m_launcherDesignComplexity)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("f1");
        child.appendChild(doc.createTextNode(convertToString(m_f1)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("teamExpertise");
        child.appendChild(doc.createTextNode(convertToString(m_teamExpertise)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("f3");
        child.appendChild(doc.createTextNode(convertToString(m_f3)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("contractorsStructure");
        child.appendChild(doc.createTextNode(convertToString(m_contractorsStructure)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("f7");
        child.appendChild(doc.createTextNode(convertToString(m_f7)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioLVMission
ScenarioLVMission::ScenarioLVMission()
{
}

ScenarioLVMission* ScenarioLVMission::create(const QDomElement& e)
{
    ScenarioLVMission* v;
    if (e.tagName() == "tns:LVMission")
    {
        v = new ScenarioLVMission;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioLVMission::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
    m_LVPayload = QSharedPointer<ScenarioLVPayload>(ScenarioLVPayload::create(*next));
    *next = next->nextSiblingElement();
    m_Environment = QSharedPointer<ScenarioEnvironmentType>(ScenarioEnvironmentType::create(*next));
    *next = next->nextSiblingElement();
    m_LaunchSite = QSharedPointer<ScenarioLaunchSite>(ScenarioLaunchSite::create(*next));
    *next = next->nextSiblingElement();
    m_TargetOrbit = QSharedPointer<ScenarioTargetOrbit>(ScenarioTargetOrbit::create(*next));
    *next = next->nextSiblingElement();
    m_Trajectory = QSharedPointer<ScenarioTrajectory>(ScenarioTrajectory::create(*next));
    *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioLVMission::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("LVMission");
    if (!m_LVPayload.isNull())
    {
        QDomElement child = m_LVPayload->toDomElement(doc);
        child.setTagName("LVPayload");
        e.appendChild(child);
    }
    if (!m_Environment.isNull())
    {
        QDomElement child = m_Environment->toDomElement(doc);
        e.appendChild(child);
    }
    if (!m_LaunchSite.isNull())
    {
        QDomElement child = m_LaunchSite->toDomElement(doc);
        child.setTagName("LaunchSite");
        e.appendChild(child);
    }
    if (!m_TargetOrbit.isNull())
    {
        QDomElement child = m_TargetOrbit->toDomElement(doc);
        child.setTagName("TargetOrbit");
        e.appendChild(child);
    }
    if (!m_Trajectory.isNull())
    {
        QDomElement child = m_Trajectory->toDomElement(doc);
        e.appendChild(child);
    }
    return e;
}




// ScenarioLVPayload
ScenarioLVPayload::ScenarioLVPayload() :
    m_mass(0.0),
    m_length(0.0),
    m_diameter(0.0),
    m_CoGLongPosition(0.0),
    m_maxAxialAcc(0.0),
    m_maxHeatFlux(0.0)
{
}

ScenarioLVPayload* ScenarioLVPayload::create(const QDomElement& e)
{
    ScenarioLVPayload* v;
    if (e.tagName() == "tns:LVPayload")
    {
        v = new ScenarioLVPayload;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioLVPayload::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
        m_mass = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_length = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_diameter = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_CoGLongPosition = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_maxAxialAcc = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_maxHeatFlux = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioLVPayload::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("LVPayload");
    {
        QDomElement child = doc.createElement("mass");
        child.appendChild(doc.createTextNode(convertToString(m_mass)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("length");
        child.appendChild(doc.createTextNode(convertToString(m_length)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("diameter");
        child.appendChild(doc.createTextNode(convertToString(m_diameter)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("CoGLongPosition");
        child.appendChild(doc.createTextNode(convertToString(m_CoGLongPosition)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("maxAxialAcc");
        child.appendChild(doc.createTextNode(convertToString(m_maxAxialAcc)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("maxHeatFlux");
        child.appendChild(doc.createTextNode(convertToString(m_maxHeatFlux)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioLaunchSite
ScenarioLaunchSite::ScenarioLaunchSite()
{
}

ScenarioLaunchSite* ScenarioLaunchSite::create(const QDomElement& e)
{
    ScenarioLaunchSite* v;
    if (e.tagName() == "tns:LaunchSite")
    {
        v = new ScenarioLaunchSite;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioLaunchSite::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
    m_Abstract3DOFPosition = QSharedPointer<ScenarioAbstract3DOFPositionType>(ScenarioAbstract3DOFPositionType::create(*next));
    *next = next->nextSiblingElement();
        m_allowedAzimuths = parseDoubleList(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioLaunchSite::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("LaunchSite");
    if (!m_Abstract3DOFPosition.isNull())
    {
        QDomElement child = m_Abstract3DOFPosition->toDomElement(doc);
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("allowedAzimuths");
        child.appendChild(doc.createTextNode(convertToString(m_allowedAzimuths)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioTargetOrbit
ScenarioTargetOrbit::ScenarioTargetOrbit() :
    m_semiaxis(0.0),
    m_eccentricity(0.0),
    m_inclination(0.0),
    m_semiaxisTol(0.0),
    m_eccentricityTol(0.0),
    m_inclinationTol(0.0)
{
}

ScenarioTargetOrbit* ScenarioTargetOrbit::create(const QDomElement& e)
{
    ScenarioTargetOrbit* v;
    if (e.tagName() == "tns:TargetOrbit")
    {
        v = new ScenarioTargetOrbit;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioTargetOrbit::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
        m_semiaxis = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_eccentricity = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_inclination = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_semiaxisTol = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_eccentricityTol = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_inclinationTol = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioTargetOrbit::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("TargetOrbit");
    {
        QDomElement child = doc.createElement("semiaxis");
        child.appendChild(doc.createTextNode(convertToString(m_semiaxis)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("eccentricity");
        child.appendChild(doc.createTextNode(convertToString(m_eccentricity)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("inclination");
        child.appendChild(doc.createTextNode(convertToString(m_inclination)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("semiaxisTol");
        child.appendChild(doc.createTextNode(convertToString(m_semiaxisTol)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("eccentricityTol");
        child.appendChild(doc.createTextNode(convertToString(m_eccentricityTol)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("inclinationTol");
        child.appendChild(doc.createTextNode(convertToString(m_inclinationTol)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioLVSystemType
ScenarioLVSystemType::ScenarioLVSystemType()
{
}

ScenarioLVSystemType* ScenarioLVSystemType::create(const QDomElement& e)
{
    ScenarioLVSystemType* v;
    if (e.tagName() == "tns:LVSystemType")
    {
        v = new ScenarioLVSystemType;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioLVSystemType::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
    m_Architecture = QSharedPointer<ScenarioArchitecture>(ScenarioArchitecture::create(*next));
    *next = next->nextSiblingElement();
    for (;;)
    {
        QSharedPointer<ScenarioLowerStage> v(ScenarioLowerStage::create(*next));
        if (v.isNull()) break; else {
            m_LowerStage << v;
            *next = next->nextSiblingElement();
        }
    }
    m_UpperStage = QSharedPointer<ScenarioUpperStage>(ScenarioUpperStage::create(*next));
    *next = next->nextSiblingElement();
    for (;;)
    {
        QSharedPointer<ScenarioBoosters> v(ScenarioBoosters::create(*next));
        if (v.isNull()) break; else {
            m_Boosters << v;
            *next = next->nextSiblingElement();
        }
    }
    m_SystemWeights = QSharedPointer<ScenarioSystemWeights>(ScenarioSystemWeights::create(*next));
    *next = next->nextSiblingElement();
    m_SystemCosts = QSharedPointer<ScenarioSystemCosts>(ScenarioSystemCosts::create(*next));
    *next = next->nextSiblingElement();
    m_SystemReliability = QSharedPointer<ScenarioSystemReliability>(ScenarioSystemReliability::create(*next));
    *next = next->nextSiblingElement();
    m_LVAerodynamics = QSharedPointer<ScenarioLVAerodynamics>(ScenarioLVAerodynamics::create(*next));
    *next = next->nextSiblingElement();
    m_DiscretizationSettings = QSharedPointer<ScenarioDiscretizationSettings>(ScenarioDiscretizationSettings::create(*next));
    *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioLVSystemType::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("LVSystemType");
    if (!m_Architecture.isNull())
    {
        QDomElement child = m_Architecture->toDomElement(doc);
        child.setTagName("Architecture");
        e.appendChild(child);
    }
    foreach (QSharedPointer<ScenarioLowerStage> p, m_LowerStage)
    {
        e.appendChild(p->toDomElement(doc));
    }
    if (!m_UpperStage.isNull())
    {
        QDomElement child = m_UpperStage->toDomElement(doc);
        child.setTagName("UpperStage");
        e.appendChild(child);
    }
    foreach (QSharedPointer<ScenarioBoosters> p, m_Boosters)
    {
        e.appendChild(p->toDomElement(doc));
    }
    if (!m_SystemWeights.isNull())
    {
        QDomElement child = m_SystemWeights->toDomElement(doc);
        e.appendChild(child);
    }
    if (!m_SystemCosts.isNull())
    {
        QDomElement child = m_SystemCosts->toDomElement(doc);
        e.appendChild(child);
    }
    if (!m_SystemReliability.isNull())
    {
        QDomElement child = m_SystemReliability->toDomElement(doc);
        e.appendChild(child);
    }
    if (!m_LVAerodynamics.isNull())
    {
        QDomElement child = m_LVAerodynamics->toDomElement(doc);
        e.appendChild(child);
    }
    if (!m_DiscretizationSettings.isNull())
    {
        QDomElement child = m_DiscretizationSettings->toDomElement(doc);
        child.setTagName("DiscretizationSettings");
        e.appendChild(child);
    }
    return e;
}




// ScenarioArchitecture
ScenarioArchitecture::ScenarioArchitecture()
{
}

ScenarioArchitecture* ScenarioArchitecture::create(const QDomElement& e)
{
    ScenarioArchitecture* v;
    if (e.tagName() == "tns:Architecture")
    {
        v = new ScenarioArchitecture;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioArchitecture::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
    m_boosterConf = QSharedPointer<ScenarioOptVarString>(ScenarioOptVarString::create(*next));
    *next = next->nextSiblingElement();
    m_nStages = QSharedPointer<ScenarioOptVarInt>(ScenarioOptVarInt::create(*next));
    *next = next->nextSiblingElement();
    m_nBoosters = QSharedPointer<ScenarioOptVarInt>(ScenarioOptVarInt::create(*next));
    *next = next->nextSiblingElement();
    m_singleEngineType = QSharedPointer<ScenarioOptVarBool>(ScenarioOptVarBool::create(*next));
    *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioArchitecture::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("Architecture");
    if (!m_boosterConf.isNull())
    {
        QDomElement child = m_boosterConf->toDomElement(doc);
        child.setTagName("boosterConf");
        e.appendChild(child);
    }
    if (!m_nStages.isNull())
    {
        QDomElement child = m_nStages->toDomElement(doc);
        child.setTagName("nStages");
        e.appendChild(child);
    }
    if (!m_nBoosters.isNull())
    {
        QDomElement child = m_nBoosters->toDomElement(doc);
        child.setTagName("nBoosters");
        e.appendChild(child);
    }
    if (!m_singleEngineType.isNull())
    {
        QDomElement child = m_singleEngineType->toDomElement(doc);
        child.setTagName("singleEngineType");
        e.appendChild(child);
    }
    return e;
}




// ScenarioLowerStage
ScenarioLowerStage::ScenarioLowerStage()
{
}

ScenarioLowerStage* ScenarioLowerStage::create(const QDomElement& e)
{
    ScenarioLowerStage* v;
    if (e.tagName() == "tns:LowerStage")
    {
        v = new ScenarioLowerStage;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioLowerStage::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
    m_Geometry = QSharedPointer<ScenarioGeometry>(ScenarioGeometry::create(*next));
    *next = next->nextSiblingElement();
    m_PropulsionSystem = QSharedPointer<ScenarioPropulsionSystem>(ScenarioPropulsionSystem::create(*next));
    *next = next->nextSiblingElement();
    m_ComponentWeights = QSharedPointer<ScenarioComponentWeights>(ScenarioComponentWeights::create(*next));
    *next = next->nextSiblingElement();
    m_ComponentCosts = QSharedPointer<ScenarioComponentCosts>(ScenarioComponentCosts::create(*next));
    *next = next->nextSiblingElement();
    m_ComponentReliability = QSharedPointer<ScenarioComponentReliability>(ScenarioComponentReliability::create(*next));
    *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioLowerStage::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("LowerStage");
    if (!m_Geometry.isNull())
    {
        QDomElement child = m_Geometry->toDomElement(doc);
        e.appendChild(child);
    }
    if (!m_PropulsionSystem.isNull())
    {
        QDomElement child = m_PropulsionSystem->toDomElement(doc);
        e.appendChild(child);
    }
    if (!m_ComponentWeights.isNull())
    {
        QDomElement child = m_ComponentWeights->toDomElement(doc);
        e.appendChild(child);
    }
    if (!m_ComponentCosts.isNull())
    {
        QDomElement child = m_ComponentCosts->toDomElement(doc);
        e.appendChild(child);
    }
    if (!m_ComponentReliability.isNull())
    {
        QDomElement child = m_ComponentReliability->toDomElement(doc);
        e.appendChild(child);
    }
    return e;
}




// ScenarioUpperStage
ScenarioUpperStage::ScenarioUpperStage()
{
}

ScenarioUpperStage* ScenarioUpperStage::create(const QDomElement& e)
{
    ScenarioUpperStage* v;
    if (e.tagName() == "tns:UpperStage")
    {
        v = new ScenarioUpperStage;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioUpperStage::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
    m_Geometry = QSharedPointer<ScenarioGeometry>(ScenarioGeometry::create(*next));
    *next = next->nextSiblingElement();
    m_PropulsionSystem = QSharedPointer<ScenarioPropulsionSystem>(ScenarioPropulsionSystem::create(*next));
    *next = next->nextSiblingElement();
    m_ComponentWeights = QSharedPointer<ScenarioComponentWeights>(ScenarioComponentWeights::create(*next));
    *next = next->nextSiblingElement();
    m_ComponentCosts = QSharedPointer<ScenarioComponentCosts>(ScenarioComponentCosts::create(*next));
    *next = next->nextSiblingElement();
    m_ComponentReliability = QSharedPointer<ScenarioComponentReliability>(ScenarioComponentReliability::create(*next));
    *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioUpperStage::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("UpperStage");
    if (!m_Geometry.isNull())
    {
        QDomElement child = m_Geometry->toDomElement(doc);
        e.appendChild(child);
    }
    if (!m_PropulsionSystem.isNull())
    {
        QDomElement child = m_PropulsionSystem->toDomElement(doc);
        e.appendChild(child);
    }
    if (!m_ComponentWeights.isNull())
    {
        QDomElement child = m_ComponentWeights->toDomElement(doc);
        e.appendChild(child);
    }
    if (!m_ComponentCosts.isNull())
    {
        QDomElement child = m_ComponentCosts->toDomElement(doc);
        e.appendChild(child);
    }
    if (!m_ComponentReliability.isNull())
    {
        QDomElement child = m_ComponentReliability->toDomElement(doc);
        e.appendChild(child);
    }
    return e;
}




// ScenarioBoosters
ScenarioBoosters::ScenarioBoosters()
{
}

ScenarioBoosters* ScenarioBoosters::create(const QDomElement& e)
{
    ScenarioBoosters* v;
    if (e.tagName() == "tns:Boosters")
    {
        v = new ScenarioBoosters;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioBoosters::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
    m_Geometry = QSharedPointer<ScenarioGeometry>(ScenarioGeometry::create(*next));
    *next = next->nextSiblingElement();
    m_PropulsionSystem = QSharedPointer<ScenarioPropulsionSystem>(ScenarioPropulsionSystem::create(*next));
    *next = next->nextSiblingElement();
    m_ComponentWeights = QSharedPointer<ScenarioComponentWeights>(ScenarioComponentWeights::create(*next));
    *next = next->nextSiblingElement();
    m_ComponentCosts = QSharedPointer<ScenarioComponentCosts>(ScenarioComponentCosts::create(*next));
    *next = next->nextSiblingElement();
    m_ComponentReliability = QSharedPointer<ScenarioComponentReliability>(ScenarioComponentReliability::create(*next));
    *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioBoosters::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("Boosters");
    if (!m_Geometry.isNull())
    {
        QDomElement child = m_Geometry->toDomElement(doc);
        e.appendChild(child);
    }
    if (!m_PropulsionSystem.isNull())
    {
        QDomElement child = m_PropulsionSystem->toDomElement(doc);
        e.appendChild(child);
    }
    if (!m_ComponentWeights.isNull())
    {
        QDomElement child = m_ComponentWeights->toDomElement(doc);
        e.appendChild(child);
    }
    if (!m_ComponentCosts.isNull())
    {
        QDomElement child = m_ComponentCosts->toDomElement(doc);
        e.appendChild(child);
    }
    if (!m_ComponentReliability.isNull())
    {
        QDomElement child = m_ComponentReliability->toDomElement(doc);
        e.appendChild(child);
    }
    return e;
}




// ScenarioDiscretizationSettings
ScenarioDiscretizationSettings::ScenarioDiscretizationSettings() :
    m_nMachPointsCl(0),
    m_nAlfaPointsCl(0),
    m_nMachPointsCd(0),
    m_nAlfaPointsCd(0),
    m_nMachPointsCm(0),
    m_nAlfaPointsCm(0),
    m_nPitchControlNodes(0),
    m_nYawControlNodes(0),
    m_nThrustControlNodes(0)
{
}

ScenarioDiscretizationSettings* ScenarioDiscretizationSettings::create(const QDomElement& e)
{
    ScenarioDiscretizationSettings* v;
    if (e.tagName() == "tns:DiscretizationSettings")
    {
        v = new ScenarioDiscretizationSettings;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioDiscretizationSettings::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
        m_nMachPointsCl = parseInt(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_nAlfaPointsCl = parseInt(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_nMachPointsCd = parseInt(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_nAlfaPointsCd = parseInt(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_nMachPointsCm = parseInt(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_nAlfaPointsCm = parseInt(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_nPitchControlNodes = parseInt(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_nYawControlNodes = parseInt(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_nThrustControlNodes = parseInt(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioDiscretizationSettings::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("DiscretizationSettings");
    {
        QDomElement child = doc.createElement("nMachPointsCl");
        child.appendChild(doc.createTextNode(convertToString(m_nMachPointsCl)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("nAlfaPointsCl");
        child.appendChild(doc.createTextNode(convertToString(m_nAlfaPointsCl)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("nMachPointsCd");
        child.appendChild(doc.createTextNode(convertToString(m_nMachPointsCd)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("nAlfaPointsCd");
        child.appendChild(doc.createTextNode(convertToString(m_nAlfaPointsCd)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("nMachPointsCm");
        child.appendChild(doc.createTextNode(convertToString(m_nMachPointsCm)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("nAlfaPointsCm");
        child.appendChild(doc.createTextNode(convertToString(m_nAlfaPointsCm)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("nPitchControlNodes");
        child.appendChild(doc.createTextNode(convertToString(m_nPitchControlNodes)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("nYawControlNodes");
        child.appendChild(doc.createTextNode(convertToString(m_nYawControlNodes)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("nThrustControlNodes");
        child.appendChild(doc.createTextNode(convertToString(m_nThrustControlNodes)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioGeometry
ScenarioGeometry::ScenarioGeometry() :
    m_length(0.0),
    m_diameter(0.0),
    m_baseLongPosition(0.0),
    m_constraintEngine(0.0),
    m_constraintInterference(0.0)
{
}

ScenarioGeometry* ScenarioGeometry::create(const QDomElement& e)
{
    ScenarioGeometry* v;
    if (e.tagName() == "tns:Geometry")
    {
        v = new ScenarioGeometry;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioGeometry::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
        m_length = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_diameter = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    m_diameterEqualToUpper = QSharedPointer<ScenarioOptVarBool>(ScenarioOptVarBool::create(*next));
    *next = next->nextSiblingElement();
        m_frontShape = (next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_baseLongPosition = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_constraintEngine = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_constraintInterference = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioGeometry::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("Geometry");
    {
        QDomElement child = doc.createElement("length");
        child.appendChild(doc.createTextNode(convertToString(m_length)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("diameter");
        child.appendChild(doc.createTextNode(convertToString(m_diameter)));
        e.appendChild(child);
    }
    if (!m_diameterEqualToUpper.isNull())
    {
        QDomElement child = m_diameterEqualToUpper->toDomElement(doc);
        child.setTagName("diameterEqualToUpper");
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("frontShape");
        child.appendChild(doc.createTextNode(convertToString(m_frontShape)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("baseLongPosition");
        child.appendChild(doc.createTextNode(convertToString(m_baseLongPosition)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("constraintEngine");
        child.appendChild(doc.createTextNode(convertToString(m_constraintEngine)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("constraintInterference");
        child.appendChild(doc.createTextNode(convertToString(m_constraintInterference)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioLVAerodynamics
ScenarioLVAerodynamics::ScenarioLVAerodynamics() :
    m_referenceArea(0.0),
    m_referenceLength(0.0)
{
}

ScenarioLVAerodynamics* ScenarioLVAerodynamics::create(const QDomElement& e)
{
    ScenarioLVAerodynamics* v;
    if (e.tagName() == "tns:LVAerodynamics")
    {
        v = new ScenarioLVAerodynamics;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioLVAerodynamics::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
        m_userDefinedAero = parseBoolean(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_referenceArea = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_referenceLength = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_clFileName = (next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_cdFileName = (next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_cmFileName = (next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioLVAerodynamics::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("LVAerodynamics");
    {
        QDomElement child = doc.createElement("userDefinedAero");
        child.appendChild(doc.createTextNode(convertToString(m_userDefinedAero)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("referenceArea");
        child.appendChild(doc.createTextNode(convertToString(m_referenceArea)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("referenceLength");
        child.appendChild(doc.createTextNode(convertToString(m_referenceLength)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("clFileName");
        child.appendChild(doc.createTextNode(convertToString(m_clFileName)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("cdFileName");
        child.appendChild(doc.createTextNode(convertToString(m_cdFileName)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("cmFileName");
        child.appendChild(doc.createTextNode(convertToString(m_cmFileName)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioComponentWeights
ScenarioComponentWeights::ScenarioComponentWeights() :
    m_dryMass(0.0),
    m_dryCoGLongPosition(0.0),
    m_wetMass(0.0),
    m_mainStructMass(0.0),
    m_oxTankMass(0.0),
    m_fuelTankMass(0.0),
    m_tpsMass(0.0),
    m_avionicsMass(0.0),
    m_epsMass(0.0),
    m_plAdapterMass(0.0),
    m_padInterfaceMass(0.0),
    m_interstageMass(0.0)
{
}

ScenarioComponentWeights* ScenarioComponentWeights::create(const QDomElement& e)
{
    ScenarioComponentWeights* v;
    if (e.tagName() == "tns:ComponentWeights")
    {
        v = new ScenarioComponentWeights;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioComponentWeights::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
        m_dryMass = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_dryCoGLongPosition = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    if (next->tagName() == "tns:wetMass")
    {
        m_wetMass = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    }
        m_mainStructMass = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    if (next->tagName() == "tns:oxTankMass")
    {
        m_oxTankMass = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    }
    if (next->tagName() == "tns:fuelTankMass")
    {
        m_fuelTankMass = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    }
        m_tpsMass = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_avionicsMass = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_epsMass = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    if (next->tagName() == "tns:plAdapterMass")
    {
        m_plAdapterMass = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    }
    if (next->tagName() == "tns:padInterfaceMass")
    {
        m_padInterfaceMass = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    }
    if (next->tagName() == "tns:interstageMass")
    {
        m_interstageMass = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    }
    return true;
}

QDomElement ScenarioComponentWeights::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("ComponentWeights");
    {
        QDomElement child = doc.createElement("dryMass");
        child.appendChild(doc.createTextNode(convertToString(m_dryMass)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("dryCoGLongPosition");
        child.appendChild(doc.createTextNode(convertToString(m_dryCoGLongPosition)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("wetMass");
        child.appendChild(doc.createTextNode(convertToString(m_wetMass)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("mainStructMass");
        child.appendChild(doc.createTextNode(convertToString(m_mainStructMass)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("oxTankMass");
        child.appendChild(doc.createTextNode(convertToString(m_oxTankMass)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("fuelTankMass");
        child.appendChild(doc.createTextNode(convertToString(m_fuelTankMass)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("tpsMass");
        child.appendChild(doc.createTextNode(convertToString(m_tpsMass)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("avionicsMass");
        child.appendChild(doc.createTextNode(convertToString(m_avionicsMass)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("epsMass");
        child.appendChild(doc.createTextNode(convertToString(m_epsMass)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("plAdapterMass");
        child.appendChild(doc.createTextNode(convertToString(m_plAdapterMass)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("padInterfaceMass");
        child.appendChild(doc.createTextNode(convertToString(m_padInterfaceMass)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("interstageMass");
        child.appendChild(doc.createTextNode(convertToString(m_interstageMass)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioSystemWeights
ScenarioSystemWeights::ScenarioSystemWeights() :
    m_totalDryMass(0.0),
    m_totalWetMass(0.0),
    m_takeoffThrustOverWeight(0.0)
{
}

ScenarioSystemWeights* ScenarioSystemWeights::create(const QDomElement& e)
{
    ScenarioSystemWeights* v;
    if (e.tagName() == "tns:SystemWeights")
    {
        v = new ScenarioSystemWeights;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioSystemWeights::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
        m_totalDryMass = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_totalWetMass = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_takeoffThrustOverWeight = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    m_maxAxialAcc = QSharedPointer<ScenarioOptVarDouble>(ScenarioOptVarDouble::create(*next));
    *next = next->nextSiblingElement();
    m_maxHeatFlux = QSharedPointer<ScenarioOptVarDouble>(ScenarioOptVarDouble::create(*next));
    *next = next->nextSiblingElement();
    m_maxDynPressure = QSharedPointer<ScenarioOptVarDouble>(ScenarioOptVarDouble::create(*next));
    *next = next->nextSiblingElement();
    m_mainStructuralMaterial = QSharedPointer<ScenarioOptVarString>(ScenarioOptVarString::create(*next));
    *next = next->nextSiblingElement();
    m_tanksArrangement = QSharedPointer<ScenarioOptVarString>(ScenarioOptVarString::create(*next));
    *next = next->nextSiblingElement();
    m_tanksType = QSharedPointer<ScenarioOptVarString>(ScenarioOptVarString::create(*next));
    *next = next->nextSiblingElement();
    m_redundancyLevel = QSharedPointer<ScenarioOptVarString>(ScenarioOptVarString::create(*next));
    *next = next->nextSiblingElement();
    m_structuralSafetyMargin = QSharedPointer<ScenarioOptVarDouble>(ScenarioOptVarDouble::create(*next));
    *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioSystemWeights::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("SystemWeights");
    {
        QDomElement child = doc.createElement("totalDryMass");
        child.appendChild(doc.createTextNode(convertToString(m_totalDryMass)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("totalWetMass");
        child.appendChild(doc.createTextNode(convertToString(m_totalWetMass)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("takeoffThrustOverWeight");
        child.appendChild(doc.createTextNode(convertToString(m_takeoffThrustOverWeight)));
        e.appendChild(child);
    }
    if (!m_maxAxialAcc.isNull())
    {
        QDomElement child = m_maxAxialAcc->toDomElement(doc);
        child.setTagName("maxAxialAcc");
        e.appendChild(child);
    }
    if (!m_maxHeatFlux.isNull())
    {
        QDomElement child = m_maxHeatFlux->toDomElement(doc);
        child.setTagName("maxHeatFlux");
        e.appendChild(child);
    }
    if (!m_maxDynPressure.isNull())
    {
        QDomElement child = m_maxDynPressure->toDomElement(doc);
        child.setTagName("maxDynPressure");
        e.appendChild(child);
    }
    if (!m_mainStructuralMaterial.isNull())
    {
        QDomElement child = m_mainStructuralMaterial->toDomElement(doc);
        child.setTagName("mainStructuralMaterial");
        e.appendChild(child);
    }
    if (!m_tanksArrangement.isNull())
    {
        QDomElement child = m_tanksArrangement->toDomElement(doc);
        child.setTagName("tanksArrangement");
        e.appendChild(child);
    }
    if (!m_tanksType.isNull())
    {
        QDomElement child = m_tanksType->toDomElement(doc);
        child.setTagName("tanksType");
        e.appendChild(child);
    }
    if (!m_redundancyLevel.isNull())
    {
        QDomElement child = m_redundancyLevel->toDomElement(doc);
        child.setTagName("redundancyLevel");
        e.appendChild(child);
    }
    if (!m_structuralSafetyMargin.isNull())
    {
        QDomElement child = m_structuralSafetyMargin->toDomElement(doc);
        child.setTagName("structuralSafetyMargin");
        e.appendChild(child);
    }
    return e;
}




// ScenarioComponentCosts
ScenarioComponentCosts::ScenarioComponentCosts()
{
}

ScenarioComponentCosts* ScenarioComponentCosts::create(const QDomElement& e)
{
    ScenarioComponentCosts* v;
    if (e.tagName() == "tns:ComponentCosts")
    {
        v = new ScenarioComponentCosts;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioComponentCosts::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
    m_nEngineTests = QSharedPointer<ScenarioOptVarInt>(ScenarioOptVarInt::create(*next));
    *next = next->nextSiblingElement();
    m_DevelopmentCosts = QSharedPointer<ScenarioDevelopmentCosts>(ScenarioDevelopmentCosts::create(*next));
    *next = next->nextSiblingElement();
    m_ProductionCosts = QSharedPointer<ScenarioProductionCosts>(ScenarioProductionCosts::create(*next));
    *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioComponentCosts::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("ComponentCosts");
    if (!m_nEngineTests.isNull())
    {
        QDomElement child = m_nEngineTests->toDomElement(doc);
        child.setTagName("nEngineTests");
        e.appendChild(child);
    }
    if (!m_DevelopmentCosts.isNull())
    {
        QDomElement child = m_DevelopmentCosts->toDomElement(doc);
        child.setTagName("DevelopmentCosts");
        e.appendChild(child);
    }
    if (!m_ProductionCosts.isNull())
    {
        QDomElement child = m_ProductionCosts->toDomElement(doc);
        child.setTagName("ProductionCosts");
        e.appendChild(child);
    }
    return e;
}




// ScenarioDevelopmentCosts
ScenarioDevelopmentCosts::ScenarioDevelopmentCosts() :
    m_enginef2(0.0),
    m_enginef5(0.0),
    m_engineDevelopmentCost(0.0),
    m_systemf2(0.0),
    m_systemDevelopmentCost(0.0)
{
}

ScenarioDevelopmentCosts* ScenarioDevelopmentCosts::create(const QDomElement& e)
{
    ScenarioDevelopmentCosts* v;
    if (e.tagName() == "tns:DevelopmentCosts")
    {
        v = new ScenarioDevelopmentCosts;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioDevelopmentCosts::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
        m_enginef2 = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_enginef5 = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_engineDevelopmentCost = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_systemf2 = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_systemDevelopmentCost = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioDevelopmentCosts::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("DevelopmentCosts");
    {
        QDomElement child = doc.createElement("enginef2");
        child.appendChild(doc.createTextNode(convertToString(m_enginef2)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("enginef5");
        child.appendChild(doc.createTextNode(convertToString(m_enginef5)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("engineDevelopmentCost");
        child.appendChild(doc.createTextNode(convertToString(m_engineDevelopmentCost)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("systemf2");
        child.appendChild(doc.createTextNode(convertToString(m_systemf2)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("systemDevelopmentCost");
        child.appendChild(doc.createTextNode(convertToString(m_systemDevelopmentCost)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioProductionCosts
ScenarioProductionCosts::ScenarioProductionCosts() :
    m_totalNumberOfEngines(0),
    m_enginesLearningFactor(0.0),
    m_totalNumberOfSystems(0),
    m_systemsLearningFactor(0.0),
    m_totalEngineProductionCost(0.0),
    m_totalSystemProductionCost(0.0)
{
}

ScenarioProductionCosts* ScenarioProductionCosts::create(const QDomElement& e)
{
    ScenarioProductionCosts* v;
    if (e.tagName() == "tns:ProductionCosts")
    {
        v = new ScenarioProductionCosts;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioProductionCosts::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
        m_totalNumberOfEngines = parseInt(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_enginesLearningFactor = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_totalNumberOfSystems = parseInt(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_systemsLearningFactor = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_totalEngineProductionCost = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_totalSystemProductionCost = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioProductionCosts::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("ProductionCosts");
    {
        QDomElement child = doc.createElement("totalNumberOfEngines");
        child.appendChild(doc.createTextNode(convertToString(m_totalNumberOfEngines)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("enginesLearningFactor");
        child.appendChild(doc.createTextNode(convertToString(m_enginesLearningFactor)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("totalNumberOfSystems");
        child.appendChild(doc.createTextNode(convertToString(m_totalNumberOfSystems)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("systemsLearningFactor");
        child.appendChild(doc.createTextNode(convertToString(m_systemsLearningFactor)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("totalEngineProductionCost");
        child.appendChild(doc.createTextNode(convertToString(m_totalEngineProductionCost)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("totalSystemProductionCost");
        child.appendChild(doc.createTextNode(convertToString(m_totalSystemProductionCost)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioSystemCosts
ScenarioSystemCosts::ScenarioSystemCosts() :
    m_developmentTime(0.0)
{
}

ScenarioSystemCosts* ScenarioSystemCosts::create(const QDomElement& e)
{
    ScenarioSystemCosts* v;
    if (e.tagName() == "tns:SystemCosts")
    {
        v = new ScenarioSystemCosts;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioSystemCosts::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
    m_TotalProgramCosts = QSharedPointer<ScenarioTotalProgramCosts>(ScenarioTotalProgramCosts::create(*next));
    *next = next->nextSiblingElement();
        m_developmentTime = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    m_DirectOperationsCosts = QSharedPointer<ScenarioDirectOperationsCosts>(ScenarioDirectOperationsCosts::create(*next));
    *next = next->nextSiblingElement();
    m_IndirectOperationsCosts = QSharedPointer<ScenarioIndirectOperationsCosts>(ScenarioIndirectOperationsCosts::create(*next));
    *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioSystemCosts::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("SystemCosts");
    if (!m_TotalProgramCosts.isNull())
    {
        QDomElement child = m_TotalProgramCosts->toDomElement(doc);
        child.setTagName("TotalProgramCosts");
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("developmentTime");
        child.appendChild(doc.createTextNode(convertToString(m_developmentTime)));
        e.appendChild(child);
    }
    if (!m_DirectOperationsCosts.isNull())
    {
        QDomElement child = m_DirectOperationsCosts->toDomElement(doc);
        child.setTagName("DirectOperationsCosts");
        e.appendChild(child);
    }
    if (!m_IndirectOperationsCosts.isNull())
    {
        QDomElement child = m_IndirectOperationsCosts->toDomElement(doc);
        child.setTagName("IndirectOperationsCosts");
        e.appendChild(child);
    }
    return e;
}




// ScenarioTotalProgramCosts
ScenarioTotalProgramCosts::ScenarioTotalProgramCosts() :
    m_lifeCycleCostMY(0.0),
    m_costPerLaunchMY(0.0),
    m_costPerKiloMY(0.0),
    m_FYref(0),
    m_MYtoFYEuros(0.0),
    m_lifeCycleCostFYEuros(0.0),
    m_costPerLaunchFYEuros(0.0),
    m_costPerKiloFYEuros(0.0)
{
}

ScenarioTotalProgramCosts* ScenarioTotalProgramCosts::create(const QDomElement& e)
{
    ScenarioTotalProgramCosts* v;
    if (e.tagName() == "tns:TotalProgramCosts")
    {
        v = new ScenarioTotalProgramCosts;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioTotalProgramCosts::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
        m_lifeCycleCostMY = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_costPerLaunchMY = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_costPerKiloMY = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_FYref = parseInt(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_MYtoFYEuros = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_lifeCycleCostFYEuros = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_costPerLaunchFYEuros = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_costPerKiloFYEuros = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioTotalProgramCosts::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("TotalProgramCosts");
    {
        QDomElement child = doc.createElement("lifeCycleCostMY");
        child.appendChild(doc.createTextNode(convertToString(m_lifeCycleCostMY)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("costPerLaunchMY");
        child.appendChild(doc.createTextNode(convertToString(m_costPerLaunchMY)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("costPerKiloMY");
        child.appendChild(doc.createTextNode(convertToString(m_costPerKiloMY)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("FYref");
        child.appendChild(doc.createTextNode(convertToString(m_FYref)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("MYtoFYEuros");
        child.appendChild(doc.createTextNode(convertToString(m_MYtoFYEuros)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("lifeCycleCostFYEuros");
        child.appendChild(doc.createTextNode(convertToString(m_lifeCycleCostFYEuros)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("costPerLaunchFYEuros");
        child.appendChild(doc.createTextNode(convertToString(m_costPerLaunchFYEuros)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("costPerKiloFYEuros");
        child.appendChild(doc.createTextNode(convertToString(m_costPerKiloFYEuros)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioDirectOperationsCosts
ScenarioDirectOperationsCosts::ScenarioDirectOperationsCosts() :
    m_transportCost(0.0),
    m_fv(0.0),
    m_fc(0.0),
    m_groundOperationsCost(0.0),
    m_Qn(0.0),
    m_flightOperationsCost(0.0),
    m_propellantsCost(0.0),
    m_insuranceFee(0.0)
{
}

ScenarioDirectOperationsCosts* ScenarioDirectOperationsCosts::create(const QDomElement& e)
{
    ScenarioDirectOperationsCosts* v;
    if (e.tagName() == "tns:DirectOperationsCosts")
    {
        v = new ScenarioDirectOperationsCosts;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioDirectOperationsCosts::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
        m_transportCost = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    m_processingType = QSharedPointer<ScenarioOptVarString>(ScenarioOptVarString::create(*next));
    *next = next->nextSiblingElement();
        m_fv = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_fc = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_groundOperationsCost = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_Qn = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_flightOperationsCost = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_propellantsCost = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_insuranceFee = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioDirectOperationsCosts::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("DirectOperationsCosts");
    {
        QDomElement child = doc.createElement("transportCost");
        child.appendChild(doc.createTextNode(convertToString(m_transportCost)));
        e.appendChild(child);
    }
    if (!m_processingType.isNull())
    {
        QDomElement child = m_processingType->toDomElement(doc);
        child.setTagName("processingType");
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("fv");
        child.appendChild(doc.createTextNode(convertToString(m_fv)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("fc");
        child.appendChild(doc.createTextNode(convertToString(m_fc)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("groundOperationsCost");
        child.appendChild(doc.createTextNode(convertToString(m_groundOperationsCost)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("Qn");
        child.appendChild(doc.createTextNode(convertToString(m_Qn)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("flightOperationsCost");
        child.appendChild(doc.createTextNode(convertToString(m_flightOperationsCost)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("propellantsCost");
        child.appendChild(doc.createTextNode(convertToString(m_propellantsCost)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("insuranceFee");
        child.appendChild(doc.createTextNode(convertToString(m_insuranceFee)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioIndirectOperationsCosts
ScenarioIndirectOperationsCosts::ScenarioIndirectOperationsCosts() :
    m_groundFacilitiesBuildingCost(0.0),
    m_launchSiteCostPerYear(0.0),
    m_personnelCostPerYear(0.0)
{
}

ScenarioIndirectOperationsCosts* ScenarioIndirectOperationsCosts::create(const QDomElement& e)
{
    ScenarioIndirectOperationsCosts* v;
    if (e.tagName() == "tns:IndirectOperationsCosts")
    {
        v = new ScenarioIndirectOperationsCosts;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioIndirectOperationsCosts::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
        m_groundFacilitiesBuildingCost = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_launchSiteCostPerYear = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_personnelCostPerYear = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioIndirectOperationsCosts::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("IndirectOperationsCosts");
    {
        QDomElement child = doc.createElement("groundFacilitiesBuildingCost");
        child.appendChild(doc.createTextNode(convertToString(m_groundFacilitiesBuildingCost)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("launchSiteCostPerYear");
        child.appendChild(doc.createTextNode(convertToString(m_launchSiteCostPerYear)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("personnelCostPerYear");
        child.appendChild(doc.createTextNode(convertToString(m_personnelCostPerYear)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioComponentReliability
ScenarioComponentReliability::ScenarioComponentReliability() :
    m_avionicsFailureRate(0.0),
    m_structureFailureRate(0.0),
    m_tpsFailureRate(0.0),
    m_overallComponentFailureRate(0.0)
{
}

ScenarioComponentReliability* ScenarioComponentReliability::create(const QDomElement& e)
{
    ScenarioComponentReliability* v;
    if (e.tagName() == "tns:ComponentReliability")
    {
        v = new ScenarioComponentReliability;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioComponentReliability::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
    m_Separation = QSharedPointer<ScenarioSeparation>(ScenarioSeparation::create(*next));
    *next = next->nextSiblingElement();
        m_avionicsFailureRate = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_structureFailureRate = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_tpsFailureRate = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    m_PropulsionReliability = QSharedPointer<ScenarioPropulsionReliability>(ScenarioPropulsionReliability::create(*next));
    *next = next->nextSiblingElement();
        m_overallComponentFailureRate = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioComponentReliability::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("ComponentReliability");
    if (!m_Separation.isNull())
    {
        QDomElement child = m_Separation->toDomElement(doc);
        child.setTagName("Separation");
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("avionicsFailureRate");
        child.appendChild(doc.createTextNode(convertToString(m_avionicsFailureRate)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("structureFailureRate");
        child.appendChild(doc.createTextNode(convertToString(m_structureFailureRate)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("tpsFailureRate");
        child.appendChild(doc.createTextNode(convertToString(m_tpsFailureRate)));
        e.appendChild(child);
    }
    if (!m_PropulsionReliability.isNull())
    {
        QDomElement child = m_PropulsionReliability->toDomElement(doc);
        child.setTagName("PropulsionReliability");
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("overallComponentFailureRate");
        child.appendChild(doc.createTextNode(convertToString(m_overallComponentFailureRate)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioSeparation
ScenarioSeparation::ScenarioSeparation() :
    m_stageSeparationReliability(0.0),
    m_boostersSetSeparationReliability(0.0),
    m_fairingSeparationReliability(0.0),
    m_payloadSeparationReliability(0.0)
{
}

ScenarioSeparation* ScenarioSeparation::create(const QDomElement& e)
{
    ScenarioSeparation* v;
    if (e.tagName() == "tns:Separation")
    {
        v = new ScenarioSeparation;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioSeparation::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
        m_stageSeparationReliability = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_boostersSetSeparationReliability = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_fairingSeparationReliability = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_payloadSeparationReliability = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioSeparation::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("Separation");
    {
        QDomElement child = doc.createElement("stageSeparationReliability");
        child.appendChild(doc.createTextNode(convertToString(m_stageSeparationReliability)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("boostersSetSeparationReliability");
        child.appendChild(doc.createTextNode(convertToString(m_boostersSetSeparationReliability)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("fairingSeparationReliability");
        child.appendChild(doc.createTextNode(convertToString(m_fairingSeparationReliability)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("payloadSeparationReliability");
        child.appendChild(doc.createTextNode(convertToString(m_payloadSeparationReliability)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioPropulsionReliability
ScenarioPropulsionReliability::ScenarioPropulsionReliability() :
    m_igniterReliability(0.0),
    m_feedFailureRate(0.0),
    m_grainFailureRate(0.0),
    m_chamberFailureRate(0.0),
    m_nozzleFailureRate(0.0),
    m_tvcFailureRate(0.0),
    m_singleEngineOverallFailureRate(0.0),
    m_propulsionOverallFailureRate(0.0)
{
}

ScenarioPropulsionReliability* ScenarioPropulsionReliability::create(const QDomElement& e)
{
    ScenarioPropulsionReliability* v;
    if (e.tagName() == "tns:PropulsionReliability")
    {
        v = new ScenarioPropulsionReliability;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioPropulsionReliability::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
        m_igniterReliability = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_feedFailureRate = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_grainFailureRate = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_chamberFailureRate = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_nozzleFailureRate = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_tvcFailureRate = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_singleEngineOverallFailureRate = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_propulsionOverallFailureRate = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioPropulsionReliability::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("PropulsionReliability");
    {
        QDomElement child = doc.createElement("igniterReliability");
        child.appendChild(doc.createTextNode(convertToString(m_igniterReliability)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("feedFailureRate");
        child.appendChild(doc.createTextNode(convertToString(m_feedFailureRate)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("grainFailureRate");
        child.appendChild(doc.createTextNode(convertToString(m_grainFailureRate)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("chamberFailureRate");
        child.appendChild(doc.createTextNode(convertToString(m_chamberFailureRate)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("nozzleFailureRate");
        child.appendChild(doc.createTextNode(convertToString(m_nozzleFailureRate)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("tvcFailureRate");
        child.appendChild(doc.createTextNode(convertToString(m_tvcFailureRate)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("singleEngineOverallFailureRate");
        child.appendChild(doc.createTextNode(convertToString(m_singleEngineOverallFailureRate)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("propulsionOverallFailureRate");
        child.appendChild(doc.createTextNode(convertToString(m_propulsionOverallFailureRate)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioSystemReliability
ScenarioSystemReliability::ScenarioSystemReliability() :
    m_globalVehicleReliability(0.0),
    m_selfDestructReliability(0.0),
    m_missionSafety(0.0),
    m_preLaunchReliability(0.0),
    m_numberOfAscentPhases(0)
{
}

ScenarioSystemReliability* ScenarioSystemReliability::create(const QDomElement& e)
{
    ScenarioSystemReliability* v;
    if (e.tagName() == "tns:SystemReliability")
    {
        v = new ScenarioSystemReliability;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioSystemReliability::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
        m_globalVehicleReliability = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_selfDestructReliability = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_missionSafety = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_preLaunchReliability = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    m_Launch = QSharedPointer<ScenarioLaunch>(ScenarioLaunch::create(*next));
    *next = next->nextSiblingElement();
        m_numberOfAscentPhases = parseInt(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_ascentPhasesDurations = parseDoubleList(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_ascentPhasesFailureRate = parseDoubleList(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioSystemReliability::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("SystemReliability");
    {
        QDomElement child = doc.createElement("globalVehicleReliability");
        child.appendChild(doc.createTextNode(convertToString(m_globalVehicleReliability)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("selfDestructReliability");
        child.appendChild(doc.createTextNode(convertToString(m_selfDestructReliability)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("missionSafety");
        child.appendChild(doc.createTextNode(convertToString(m_missionSafety)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("preLaunchReliability");
        child.appendChild(doc.createTextNode(convertToString(m_preLaunchReliability)));
        e.appendChild(child);
    }
    if (!m_Launch.isNull())
    {
        QDomElement child = m_Launch->toDomElement(doc);
        child.setTagName("Launch");
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("numberOfAscentPhases");
        child.appendChild(doc.createTextNode(convertToString(m_numberOfAscentPhases)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("ascentPhasesDurations");
        child.appendChild(doc.createTextNode(convertToString(m_ascentPhasesDurations)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("ascentPhasesFailureRate");
        child.appendChild(doc.createTextNode(convertToString(m_ascentPhasesFailureRate)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioLaunch
ScenarioLaunch::ScenarioLaunch() :
    m_launchSiteReliability(0.0),
    m_ignitionReliability(0.0),
    m_controlMarginReliability(0.0),
    m_launchOverallReliability(0.0)
{
}

ScenarioLaunch* ScenarioLaunch::create(const QDomElement& e)
{
    ScenarioLaunch* v;
    if (e.tagName() == "tns:Launch")
    {
        v = new ScenarioLaunch;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioLaunch::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
        m_launchSiteReliability = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_ignitionReliability = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_controlMarginReliability = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_launchOverallReliability = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioLaunch::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("Launch");
    {
        QDomElement child = doc.createElement("launchSiteReliability");
        child.appendChild(doc.createTextNode(convertToString(m_launchSiteReliability)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("ignitionReliability");
        child.appendChild(doc.createTextNode(convertToString(m_ignitionReliability)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("controlMarginReliability");
        child.appendChild(doc.createTextNode(convertToString(m_controlMarginReliability)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("launchOverallReliability");
        child.appendChild(doc.createTextNode(convertToString(m_launchOverallReliability)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioTrajectory
ScenarioTrajectory::ScenarioTrajectory()
{
}

ScenarioTrajectory* ScenarioTrajectory::create(const QDomElement& e)
{
    ScenarioTrajectory* v;
    if (e.tagName() == "tns:Trajectory")
    {
        v = new ScenarioTrajectory;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioTrajectory::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
    m_TakeOff = QSharedPointer<ScenarioTakeOff>(ScenarioTakeOff::create(*next));
    *next = next->nextSiblingElement();
    m_Ignitions = QSharedPointer<ScenarioIgnitions>(ScenarioIgnitions::create(*next));
    *next = next->nextSiblingElement();
    m_AtmosphericFlight = QSharedPointer<ScenarioAtmosphericFlight>(ScenarioAtmosphericFlight::create(*next));
    *next = next->nextSiblingElement();
    m_ExoatmosphericFlight = QSharedPointer<ScenarioExoatmosphericFlight>(ScenarioExoatmosphericFlight::create(*next));
    *next = next->nextSiblingElement();
    m_Constraints = QSharedPointer<ScenarioConstraints>(ScenarioConstraints::create(*next));
    *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioTrajectory::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("Trajectory");
    if (!m_TakeOff.isNull())
    {
        QDomElement child = m_TakeOff->toDomElement(doc);
        child.setTagName("TakeOff");
        e.appendChild(child);
    }
    if (!m_Ignitions.isNull())
    {
        QDomElement child = m_Ignitions->toDomElement(doc);
        child.setTagName("Ignitions");
        e.appendChild(child);
    }
    if (!m_AtmosphericFlight.isNull())
    {
        QDomElement child = m_AtmosphericFlight->toDomElement(doc);
        child.setTagName("AtmosphericFlight");
        e.appendChild(child);
    }
    if (!m_ExoatmosphericFlight.isNull())
    {
        QDomElement child = m_ExoatmosphericFlight->toDomElement(doc);
        child.setTagName("ExoatmosphericFlight");
        e.appendChild(child);
    }
    if (!m_Constraints.isNull())
    {
        QDomElement child = m_Constraints->toDomElement(doc);
        child.setTagName("Constraints");
        e.appendChild(child);
    }
    return e;
}




// ScenarioTakeOff
ScenarioTakeOff::ScenarioTakeOff() :
    m_padClearingAlt(0.0),
    m_maxPitchOverAngle(0.0),
    m_pitchOverDuration(0.0),
    m_pitchOverDecayTime(0.0),
    m_pitchOverHeadingAngle(0.0)
{
}

ScenarioTakeOff* ScenarioTakeOff::create(const QDomElement& e)
{
    ScenarioTakeOff* v;
    if (e.tagName() == "tns:TakeOff")
    {
        v = new ScenarioTakeOff;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioTakeOff::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
        m_padClearingAlt = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_maxPitchOverAngle = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_pitchOverDuration = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_pitchOverDecayTime = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_pitchOverHeadingAngle = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioTakeOff::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("TakeOff");
    {
        QDomElement child = doc.createElement("padClearingAlt");
        child.appendChild(doc.createTextNode(convertToString(m_padClearingAlt)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("maxPitchOverAngle");
        child.appendChild(doc.createTextNode(convertToString(m_maxPitchOverAngle)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("pitchOverDuration");
        child.appendChild(doc.createTextNode(convertToString(m_pitchOverDuration)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("pitchOverDecayTime");
        child.appendChild(doc.createTextNode(convertToString(m_pitchOverDecayTime)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("pitchOverHeadingAngle");
        child.appendChild(doc.createTextNode(convertToString(m_pitchOverHeadingAngle)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioIgnitions
ScenarioIgnitions::ScenarioIgnitions() :
    m_coreIgnitionDelayTime(0.0),
    m_secondBoostersSetIgnitionDelayTime(0.0)
{
}

ScenarioIgnitions* ScenarioIgnitions::create(const QDomElement& e)
{
    ScenarioIgnitions* v;
    if (e.tagName() == "tns:Ignitions")
    {
        v = new ScenarioIgnitions;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioIgnitions::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
    if (next->tagName() == "tns:coreIgnitionDelayOption")
    {
        m_coreIgnitionDelayOption = parseBoolean(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    }
    if (next->tagName() == "tns:coreIgnitionDelayTime")
    {
        m_coreIgnitionDelayTime = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    }
    if (next->tagName() == "tns:secondBoostersSetIgnitionDelayOption")
    {
        m_secondBoostersSetIgnitionDelayOption = parseBoolean(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    }
    if (next->tagName() == "tns:secondBoostersSetIgnitionDelayTime")
    {
        m_secondBoostersSetIgnitionDelayTime = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    }
    return true;
}

QDomElement ScenarioIgnitions::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("Ignitions");
    {
        QDomElement child = doc.createElement("coreIgnitionDelayOption");
        child.appendChild(doc.createTextNode(convertToString(m_coreIgnitionDelayOption)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("coreIgnitionDelayTime");
        child.appendChild(doc.createTextNode(convertToString(m_coreIgnitionDelayTime)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("secondBoostersSetIgnitionDelayOption");
        child.appendChild(doc.createTextNode(convertToString(m_secondBoostersSetIgnitionDelayOption)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("secondBoostersSetIgnitionDelayTime");
        child.appendChild(doc.createTextNode(convertToString(m_secondBoostersSetIgnitionDelayTime)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioAtmosphericFlight
ScenarioAtmosphericFlight::ScenarioAtmosphericFlight()
{
}

ScenarioAtmosphericFlight* ScenarioAtmosphericFlight::create(const QDomElement& e)
{
    ScenarioAtmosphericFlight* v;
    if (e.tagName() == "tns:AtmosphericFlight")
    {
        v = new ScenarioAtmosphericFlight;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioAtmosphericFlight::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
        m_optimizedPitchValues = parseDoubleList(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_optimizedYawValues = parseDoubleList(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    if (next->tagName() == "tns:optimizedThrustValues")
    {
        m_optimizedThrustValues = parseDoubleList(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    }
    return true;
}

QDomElement ScenarioAtmosphericFlight::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("AtmosphericFlight");
    {
        QDomElement child = doc.createElement("optimizedPitchValues");
        child.appendChild(doc.createTextNode(convertToString(m_optimizedPitchValues)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("optimizedYawValues");
        child.appendChild(doc.createTextNode(convertToString(m_optimizedYawValues)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("optimizedThrustValues");
        child.appendChild(doc.createTextNode(convertToString(m_optimizedThrustValues)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioExoatmosphericFlight
ScenarioExoatmosphericFlight::ScenarioExoatmosphericFlight() :
    m_bilinearLawInitPitch(0.0),
    m_bilinearLawFinalPitch(0.0),
    m_bilinearLawParam(0.0),
    m_circBurnTime(0.0)
{
}

ScenarioExoatmosphericFlight* ScenarioExoatmosphericFlight::create(const QDomElement& e)
{
    ScenarioExoatmosphericFlight* v;
    if (e.tagName() == "tns:ExoatmosphericFlight")
    {
        v = new ScenarioExoatmosphericFlight;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioExoatmosphericFlight::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
        m_bilinearLawInitPitch = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_bilinearLawFinalPitch = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_bilinearLawParam = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_circBurnOption = parseBoolean(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    if (next->tagName() == "tns:circBurnTime")
    {
        m_circBurnTime = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    }
    return true;
}

QDomElement ScenarioExoatmosphericFlight::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("ExoatmosphericFlight");
    {
        QDomElement child = doc.createElement("bilinearLawInitPitch");
        child.appendChild(doc.createTextNode(convertToString(m_bilinearLawInitPitch)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("bilinearLawFinalPitch");
        child.appendChild(doc.createTextNode(convertToString(m_bilinearLawFinalPitch)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("bilinearLawParam");
        child.appendChild(doc.createTextNode(convertToString(m_bilinearLawParam)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("circBurnOption");
        child.appendChild(doc.createTextNode(convertToString(m_circBurnOption)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("circBurnTime");
        child.appendChild(doc.createTextNode(convertToString(m_circBurnTime)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioConstraints
ScenarioConstraints::ScenarioConstraints() :
    m_finalSemiaxisError(0.0),
    m_finalEccError(0.0),
    m_finalInclError(0.0),
    m_axialAccCstrViolation(0.0),
    m_heatFluxCstrViolation(0.0),
    m_dynPressCstrViolation(0.0),
    m_controllabilityCstrViolation(0.0)
{
}

ScenarioConstraints* ScenarioConstraints::create(const QDomElement& e)
{
    ScenarioConstraints* v;
    if (e.tagName() == "tns:Constraints")
    {
        v = new ScenarioConstraints;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioConstraints::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
        m_finalSemiaxisError = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_finalEccError = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_finalInclError = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_axialAccCstrViolation = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_heatFluxCstrViolation = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_dynPressCstrViolation = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_controllabilityCstrViolation = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioConstraints::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("Constraints");
    {
        QDomElement child = doc.createElement("finalSemiaxisError");
        child.appendChild(doc.createTextNode(convertToString(m_finalSemiaxisError)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("finalEccError");
        child.appendChild(doc.createTextNode(convertToString(m_finalEccError)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("finalInclError");
        child.appendChild(doc.createTextNode(convertToString(m_finalInclError)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("axialAccCstrViolation");
        child.appendChild(doc.createTextNode(convertToString(m_axialAccCstrViolation)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("heatFluxCstrViolation");
        child.appendChild(doc.createTextNode(convertToString(m_heatFluxCstrViolation)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("dynPressCstrViolation");
        child.appendChild(doc.createTextNode(convertToString(m_dynPressCstrViolation)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("controllabilityCstrViolation");
        child.appendChild(doc.createTextNode(convertToString(m_controllabilityCstrViolation)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioInitialPositionType
ScenarioInitialPositionType::ScenarioInitialPositionType()
{
}

ScenarioInitialPositionType* ScenarioInitialPositionType::create(const QDomElement& e)
{
    ScenarioInitialPositionType* v;
    if (e.tagName() == "tns:InitialPositionType")
    {
        v = new ScenarioInitialPositionType;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioInitialPositionType::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
        m_CoordinateSystem = (next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    m_Abstract6DOFPosition = QSharedPointer<ScenarioAbstract6DOFPositionType>(ScenarioAbstract6DOFPositionType::create(*next));
    *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioInitialPositionType::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("InitialPositionType");
    {
        QDomElement child = doc.createElement("CoordinateSystem");
        child.appendChild(doc.createTextNode(convertToString(m_CoordinateSystem)));
        e.appendChild(child);
    }
    if (!m_Abstract6DOFPosition.isNull())
    {
        QDomElement child = m_Abstract6DOFPosition->toDomElement(doc);
        e.appendChild(child);
    }
    return e;
}




// ScenarioSC
ScenarioSC::ScenarioSC()
{
}

ScenarioSC* ScenarioSC::create(const QDomElement& e)
{
    ScenarioSC* v;
    if (e.tagName() == "tns:SC")
    {
        v = new ScenarioSC;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioSC::load(const QDomElement& e, QDomElement* next)
{
    ScenarioParticipantType::load(e, next);
    m_SCProgram = QSharedPointer<ScenarioSCProgram>(ScenarioSCProgram::create(*next));
    *next = next->nextSiblingElement();
    m_SCMission = QSharedPointer<ScenarioSCMission>(ScenarioSCMission::create(*next));
    *next = next->nextSiblingElement();
    m_System = QSharedPointer<ScenarioSCSystemType>(ScenarioSCSystemType::create(*next));
    *next = next->nextSiblingElement();
    m_Optimization = QSharedPointer<ScenarioOptimization>(ScenarioOptimization::create(*next));
    *next = next->nextSiblingElement();
    m_OutputFiles = QSharedPointer<ScenarioOutputFiles>(ScenarioOutputFiles::create(*next));
    *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioSC::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioParticipantType::toDomElement(doc);
    e.setTagName("SC");
    if (!m_SCProgram.isNull())
    {
        QDomElement child = m_SCProgram->toDomElement(doc);
        e.appendChild(child);
    }
    if (!m_SCMission.isNull())
    {
        QDomElement child = m_SCMission->toDomElement(doc);
        e.appendChild(child);
    }
    if (!m_System.isNull())
    {
        QDomElement child = m_System->toDomElement(doc);
        child.setTagName("System");
        e.appendChild(child);
    }
    if (!m_Optimization.isNull())
    {
        QDomElement child = m_Optimization->toDomElement(doc);
        e.appendChild(child);
    }
    if (!m_OutputFiles.isNull())
    {
        QDomElement child = m_OutputFiles->toDomElement(doc);
        e.appendChild(child);
    }
    return e;
}




// ScenarioSCProgram
ScenarioSCProgram::ScenarioSCProgram()
{
}

ScenarioSCProgram* ScenarioSCProgram::create(const QDomElement& e)
{
    ScenarioSCProgram* v;
    if (e.tagName() == "tns:SCProgram")
    {
        v = new ScenarioSCProgram;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioSCProgram::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
    return true;
}

QDomElement ScenarioSCProgram::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("SCProgram");
    return e;
}




// ScenarioSCMission
ScenarioSCMission::ScenarioSCMission()
{
}

ScenarioSCMission* ScenarioSCMission::create(const QDomElement& e)
{
    ScenarioSCMission* v;
    if (e.tagName() == "tns:SCMission")
    {
        v = new ScenarioSCMission;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioSCMission::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
    m_Payload = QSharedPointer<ScenarioPayload>(ScenarioPayload::create(*next));
    *next = next->nextSiblingElement();
    m_TrajectoryPlan = QSharedPointer<ScenarioTrajectoryPlan>(ScenarioTrajectoryPlan::create(*next));
    *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioSCMission::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("SCMission");
    if (!m_Payload.isNull())
    {
        QDomElement child = m_Payload->toDomElement(doc);
        child.setTagName("Payload");
        e.appendChild(child);
    }
    if (!m_TrajectoryPlan.isNull())
    {
        QDomElement child = m_TrajectoryPlan->toDomElement(doc);
        child.setTagName("TrajectoryPlan");
        e.appendChild(child);
    }
    return e;
}




// ScenarioPayload
ScenarioPayload::ScenarioPayload() :
    m_mass(0.0),
    m_power(0.0)
{
}

ScenarioPayload* ScenarioPayload::create(const QDomElement& e)
{
    ScenarioPayload* v;
    if (e.tagName() == "tns:Payload")
    {
        v = new ScenarioPayload;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioPayload::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
        m_mass = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_power = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    m_ObservationAntenna = QSharedPointer<ScenarioObservationAntenna>(ScenarioObservationAntenna::create(*next));
if (!m_ObservationAntenna.isNull())
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioPayload::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("Payload");
    {
        QDomElement child = doc.createElement("mass");
        child.appendChild(doc.createTextNode(convertToString(m_mass)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("power");
        child.appendChild(doc.createTextNode(convertToString(m_power)));
        e.appendChild(child);
    }
    if (!m_ObservationAntenna.isNull())
    {
        QDomElement child = m_ObservationAntenna->toDomElement(doc);
        e.appendChild(child);
    }
    return e;
}




// ScenarioTrajectoryPlan
ScenarioTrajectoryPlan::ScenarioTrajectoryPlan()
{
}

ScenarioTrajectoryPlan* ScenarioTrajectoryPlan::create(const QDomElement& e)
{
    ScenarioTrajectoryPlan* v;
    if (e.tagName() == "tns:TrajectoryPlan")
    {
        v = new ScenarioTrajectoryPlan;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioTrajectoryPlan::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
    for (;;)
    {
        QSharedPointer<ScenarioAbstractTrajectoryType> v(ScenarioAbstractTrajectoryType::create(*next));
        if (v.isNull()) break; else {
            m_AbstractTrajectory << v;
            *next = next->nextSiblingElement();
        }
    }
    return true;
}

QDomElement ScenarioTrajectoryPlan::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("TrajectoryPlan");
    foreach (QSharedPointer<ScenarioAbstractTrajectoryType> p, m_AbstractTrajectory)
    {
        e.appendChild(p->toDomElement(doc));
    }
    return e;
}




// ScenarioAbstractTrajectoryType
ScenarioAbstractTrajectoryType::ScenarioAbstractTrajectoryType()
{
}

ScenarioAbstractTrajectoryType* ScenarioAbstractTrajectoryType::create(const QDomElement& e)
{
    ScenarioAbstractTrajectoryType* v;
    if (e.tagName() == "tns:AbstractTrajectoryType")
    {
        v = new ScenarioAbstractTrajectoryType;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    if (e.tagName() == "tns:LoiteringType")
        return ScenarioLoiteringType::create(e);
    if (e.tagName() == "tns:RendezvousType")
        return ScenarioRendezvousType::create(e);
    if (e.tagName() == "tns:LagrangianType")
        return ScenarioLagrangianType::create(e);
    if (e.tagName() == "tns:FlyByType")
        return ScenarioFlyByType::create(e);
    return NULL;
}

bool ScenarioAbstractTrajectoryType::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
    return true;
}

QDomElement ScenarioAbstractTrajectoryType::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("AbstractTrajectoryType");
    return e;
}




// ScenarioSCEnvironmentType
ScenarioSCEnvironmentType::ScenarioSCEnvironmentType()
{
}

ScenarioSCEnvironmentType* ScenarioSCEnvironmentType::create(const QDomElement& e)
{
    ScenarioSCEnvironmentType* v;
    if (e.tagName() == "tns:SCEnvironmentType")
    {
        v = new ScenarioSCEnvironmentType;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioSCEnvironmentType::load(const QDomElement& e, QDomElement* next)
{
    ScenarioEnvironmentType::load(e, next);
        m_perturbingBody = parseStringList(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_atmosphericDrag = parseBoolean(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_solarPressure = parseBoolean(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioSCEnvironmentType::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioEnvironmentType::toDomElement(doc);
    e.setTagName("SCEnvironmentType");
    {
        QDomElement child = doc.createElement("perturbingBody");
        child.appendChild(doc.createTextNode(convertToString(m_perturbingBody)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("atmosphericDrag");
        child.appendChild(doc.createTextNode(convertToString(m_atmosphericDrag)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("solarPressure");
        child.appendChild(doc.createTextNode(convertToString(m_solarPressure)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioLoiteringType
ScenarioLoiteringType::ScenarioLoiteringType()
{
}

ScenarioLoiteringType* ScenarioLoiteringType::create(const QDomElement& e)
{
    ScenarioLoiteringType* v;
    if (e.tagName() == "tns:LoiteringType")
    {
        v = new ScenarioLoiteringType;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioLoiteringType::load(const QDomElement& e, QDomElement* next)
{
    ScenarioAbstractTrajectoryType::load(e, next);
    m_Environment = QSharedPointer<ScenarioSCEnvironmentType>(ScenarioSCEnvironmentType::create(*next));
    *next = next->nextSiblingElement();
    m_TimeLine = QSharedPointer<ScenarioTimeLine>(ScenarioTimeLine::create(*next));
    *next = next->nextSiblingElement();
    m_InitialPosition = QSharedPointer<ScenarioInitialPositionType>(ScenarioInitialPositionType::create(*next));
    *next = next->nextSiblingElement();
    m_InitialAttitude = QSharedPointer<ScenarioInitialAttitude>(ScenarioInitialAttitude::create(*next));
    *next = next->nextSiblingElement();
    m_PropagationPosition = QSharedPointer<ScenarioPropagationPosition>(ScenarioPropagationPosition::create(*next));
    *next = next->nextSiblingElement();
    m_PropagationAttitude = QSharedPointer<ScenarioPropagationAttitude>(ScenarioPropagationAttitude::create(*next));
    *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioLoiteringType::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioAbstractTrajectoryType::toDomElement(doc);
    e.setTagName("LoiteringType");
    if (!m_Environment.isNull())
    {
        QDomElement child = m_Environment->toDomElement(doc);
        child.setTagName("Environment");
        e.appendChild(child);
    }
    if (!m_TimeLine.isNull())
    {
        QDomElement child = m_TimeLine->toDomElement(doc);
        e.appendChild(child);
    }
    if (!m_InitialPosition.isNull())
    {
        QDomElement child = m_InitialPosition->toDomElement(doc);
        e.appendChild(child);
    }
    if (!m_InitialAttitude.isNull())
    {
        QDomElement child = m_InitialAttitude->toDomElement(doc);
        child.setTagName("InitialAttitude");
        e.appendChild(child);
    }
    if (!m_PropagationPosition.isNull())
    {
        QDomElement child = m_PropagationPosition->toDomElement(doc);
        child.setTagName("PropagationPosition");
        e.appendChild(child);
    }
    if (!m_PropagationAttitude.isNull())
    {
        QDomElement child = m_PropagationAttitude->toDomElement(doc);
        child.setTagName("PropagationAttitude");
        e.appendChild(child);
    }
    return e;
}




// ScenarioInitialAttitude
ScenarioInitialAttitude::ScenarioInitialAttitude()
{
}

ScenarioInitialAttitude* ScenarioInitialAttitude::create(const QDomElement& e)
{
    ScenarioInitialAttitude* v;
    if (e.tagName() == "tns:InitialAttitude")
    {
        v = new ScenarioInitialAttitude;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioInitialAttitude::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
        m_CoordinateSystem = (next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    m_Abstract6DOFAttitude = QSharedPointer<ScenarioAbstract6DOFAttitudeType>(ScenarioAbstract6DOFAttitudeType::create(*next));
    *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioInitialAttitude::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("InitialAttitude");
    {
        QDomElement child = doc.createElement("CoordinateSystem");
        child.appendChild(doc.createTextNode(convertToString(m_CoordinateSystem)));
        e.appendChild(child);
    }
    if (!m_Abstract6DOFAttitude.isNull())
    {
        QDomElement child = m_Abstract6DOFAttitude->toDomElement(doc);
        e.appendChild(child);
    }
    return e;
}




// ScenarioPropagationPosition
ScenarioPropagationPosition::ScenarioPropagationPosition() :
    m_timeStep(0.0)
{
}

ScenarioPropagationPosition* ScenarioPropagationPosition::create(const QDomElement& e)
{
    ScenarioPropagationPosition* v;
    if (e.tagName() == "tns:PropagationPosition")
    {
        v = new ScenarioPropagationPosition;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioPropagationPosition::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
        m_propagator = (next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_integrator = (next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_timeStep = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioPropagationPosition::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("PropagationPosition");
    {
        QDomElement child = doc.createElement("propagator");
        child.appendChild(doc.createTextNode(convertToString(m_propagator)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("integrator");
        child.appendChild(doc.createTextNode(convertToString(m_integrator)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("timeStep");
        child.appendChild(doc.createTextNode(convertToString(m_timeStep)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioPropagationAttitude
ScenarioPropagationAttitude::ScenarioPropagationAttitude() :
    m_timeStep(0.0)
{
}

ScenarioPropagationAttitude* ScenarioPropagationAttitude::create(const QDomElement& e)
{
    ScenarioPropagationAttitude* v;
    if (e.tagName() == "tns:PropagationAttitude")
    {
        v = new ScenarioPropagationAttitude;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioPropagationAttitude::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
        m_integrator = (next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_timeStep = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioPropagationAttitude::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("PropagationAttitude");
    {
        QDomElement child = doc.createElement("integrator");
        child.appendChild(doc.createTextNode(convertToString(m_integrator)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("timeStep");
        child.appendChild(doc.createTextNode(convertToString(m_timeStep)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioRendezvousType
ScenarioRendezvousType::ScenarioRendezvousType()
{
}

ScenarioRendezvousType* ScenarioRendezvousType::create(const QDomElement& e)
{
    ScenarioRendezvousType* v;
    if (e.tagName() == "tns:RendezvousType")
    {
        v = new ScenarioRendezvousType;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioRendezvousType::load(const QDomElement& e, QDomElement* next)
{
    ScenarioAbstractTrajectoryType::load(e, next);
    m_Environment = QSharedPointer<ScenarioSCEnvironmentType>(ScenarioSCEnvironmentType::create(*next));
    *next = next->nextSiblingElement();
    m_Parameters = QSharedPointer<ScenarioParameters>(ScenarioParameters::create(*next));
    *next = next->nextSiblingElement();
        m_Target = (next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    m_ManoeuvrePlan = QSharedPointer<ScenarioManoeuvrePlan>(ScenarioManoeuvrePlan::create(*next));
    *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioRendezvousType::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioAbstractTrajectoryType::toDomElement(doc);
    e.setTagName("RendezvousType");
    if (!m_Environment.isNull())
    {
        QDomElement child = m_Environment->toDomElement(doc);
        child.setTagName("Environment");
        e.appendChild(child);
    }
    if (!m_Parameters.isNull())
    {
        QDomElement child = m_Parameters->toDomElement(doc);
        child.setTagName("Parameters");
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("Target");
        child.appendChild(doc.createTextNode(convertToString(m_Target)));
        e.appendChild(child);
    }
    if (!m_ManoeuvrePlan.isNull())
    {
        QDomElement child = m_ManoeuvrePlan->toDomElement(doc);
        child.setTagName("ManoeuvrePlan");
        e.appendChild(child);
    }
    return e;
}




// ScenarioParameters
ScenarioParameters::ScenarioParameters()
{
}

ScenarioParameters* ScenarioParameters::create(const QDomElement& e)
{
    ScenarioParameters* v;
    if (e.tagName() == "tns:Parameters")
    {
        v = new ScenarioParameters;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioParameters::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
    m_TimeLine = QSharedPointer<ScenarioTimeLine>(ScenarioTimeLine::create(*next));
    *next = next->nextSiblingElement();
    m_InitialPosition = QSharedPointer<ScenarioInitialPositionType>(ScenarioInitialPositionType::create(*next));
    *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioParameters::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("Parameters");
    if (!m_TimeLine.isNull())
    {
        QDomElement child = m_TimeLine->toDomElement(doc);
        e.appendChild(child);
    }
    if (!m_InitialPosition.isNull())
    {
        QDomElement child = m_InitialPosition->toDomElement(doc);
        e.appendChild(child);
    }
    return e;
}




// ScenarioManoeuvrePlan
ScenarioManoeuvrePlan::ScenarioManoeuvrePlan()
{
}

ScenarioManoeuvrePlan* ScenarioManoeuvrePlan::create(const QDomElement& e)
{
    ScenarioManoeuvrePlan* v;
    if (e.tagName() == "tns:ManoeuvrePlan")
    {
        v = new ScenarioManoeuvrePlan;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioManoeuvrePlan::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
    for (;;)
    {
        QSharedPointer<ScenarioManoeuvreType> v(ScenarioManoeuvreType::create(*next));
        if (v.isNull()) break; else {
            m_AbstractManoeuvre << v;
            *next = next->nextSiblingElement();
        }
    }
    return true;
}

QDomElement ScenarioManoeuvrePlan::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("ManoeuvrePlan");
    foreach (QSharedPointer<ScenarioManoeuvreType> p, m_AbstractManoeuvre)
    {
        e.appendChild(p->toDomElement(doc));
    }
    return e;
}




// ScenarioManoeuvreType
ScenarioManoeuvreType::ScenarioManoeuvreType()
{
}

ScenarioManoeuvreType* ScenarioManoeuvreType::create(const QDomElement& e)
{
    ScenarioManoeuvreType* v;
    if (e.tagName() == "tns:ManoeuvreType")
    {
        v = new ScenarioManoeuvreType;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    if (e.tagName() == "tns:STA_MANOEUVRE_DURATION")
        return ScenarioSTA_MANOEUVRE_DURATION::create(e);
    if (e.tagName() == "tns:STA_MANOEUVRE_DELTAV")
        return ScenarioSTA_MANOEUVRE_DELTAV::create(e);
    if (e.tagName() == "tns:STA_MANOEUVRE_V_POSITION")
        return ScenarioSTA_MANOEUVRE_V_POSITION::create(e);
    if (e.tagName() == "tns:STA_MANOEUVRE_R_POSITION")
        return ScenarioSTA_MANOEUVRE_R_POSITION::create(e);
    if (e.tagName() == "tns:STA_MANOEUVRE_V_R_POSITION")
        return ScenarioSTA_MANOEUVRE_V_R_POSITION::create(e);
    if (e.tagName() == "tns:STA_MANOEUVRE_V_R_DURATION")
        return ScenarioSTA_MANOEUVRE_V_R_DURATION::create(e);
    return NULL;
}

bool ScenarioManoeuvreType::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
    return true;
}

QDomElement ScenarioManoeuvreType::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("ManoeuvreType");
    return e;
}




// ScenarioSTA_MANOEUVRE_DURATION
ScenarioSTA_MANOEUVRE_DURATION::ScenarioSTA_MANOEUVRE_DURATION() :
    m_Duration(0.0)
{
}

ScenarioSTA_MANOEUVRE_DURATION* ScenarioSTA_MANOEUVRE_DURATION::create(const QDomElement& e)
{
    ScenarioSTA_MANOEUVRE_DURATION* v;
    if (e.tagName() == "tns:STA_MANOEUVRE_DURATION")
    {
        v = new ScenarioSTA_MANOEUVRE_DURATION;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioSTA_MANOEUVRE_DURATION::load(const QDomElement& e, QDomElement* next)
{
    ScenarioManoeuvreType::load(e, next);
        m_Duration = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioSTA_MANOEUVRE_DURATION::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioManoeuvreType::toDomElement(doc);
    e.setTagName("STA_MANOEUVRE_DURATION");
    {
        QDomElement child = doc.createElement("Duration");
        child.appendChild(doc.createTextNode(convertToString(m_Duration)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioSTA_MANOEUVRE_DELTAV
ScenarioSTA_MANOEUVRE_DELTAV::ScenarioSTA_MANOEUVRE_DELTAV() :
    m_DeltaVx(0.0),
    m_DeltaVy(0.0),
    m_DeltaVz(0.0),
    m_Duration(0.0)
{
}

ScenarioSTA_MANOEUVRE_DELTAV* ScenarioSTA_MANOEUVRE_DELTAV::create(const QDomElement& e)
{
    ScenarioSTA_MANOEUVRE_DELTAV* v;
    if (e.tagName() == "tns:STA_MANOEUVRE_DELTAV")
    {
        v = new ScenarioSTA_MANOEUVRE_DELTAV;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioSTA_MANOEUVRE_DELTAV::load(const QDomElement& e, QDomElement* next)
{
    ScenarioManoeuvreType::load(e, next);
        m_DeltaVx = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_DeltaVy = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_DeltaVz = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_Duration = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioSTA_MANOEUVRE_DELTAV::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioManoeuvreType::toDomElement(doc);
    e.setTagName("STA_MANOEUVRE_DELTAV");
    {
        QDomElement child = doc.createElement("DeltaVx");
        child.appendChild(doc.createTextNode(convertToString(m_DeltaVx)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("DeltaVy");
        child.appendChild(doc.createTextNode(convertToString(m_DeltaVy)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("DeltaVz");
        child.appendChild(doc.createTextNode(convertToString(m_DeltaVz)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("Duration");
        child.appendChild(doc.createTextNode(convertToString(m_Duration)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioSTA_MANOEUVRE_V_POSITION
ScenarioSTA_MANOEUVRE_V_POSITION::ScenarioSTA_MANOEUVRE_V_POSITION() :
    m_DisplacementVbar(0.0)
{
}

ScenarioSTA_MANOEUVRE_V_POSITION* ScenarioSTA_MANOEUVRE_V_POSITION::create(const QDomElement& e)
{
    ScenarioSTA_MANOEUVRE_V_POSITION* v;
    if (e.tagName() == "tns:STA_MANOEUVRE_V_POSITION")
    {
        v = new ScenarioSTA_MANOEUVRE_V_POSITION;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioSTA_MANOEUVRE_V_POSITION::load(const QDomElement& e, QDomElement* next)
{
    ScenarioManoeuvreType::load(e, next);
        m_DisplacementVbar = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioSTA_MANOEUVRE_V_POSITION::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioManoeuvreType::toDomElement(doc);
    e.setTagName("STA_MANOEUVRE_V_POSITION");
    {
        QDomElement child = doc.createElement("DisplacementVbar");
        child.appendChild(doc.createTextNode(convertToString(m_DisplacementVbar)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioSTA_MANOEUVRE_R_POSITION
ScenarioSTA_MANOEUVRE_R_POSITION::ScenarioSTA_MANOEUVRE_R_POSITION() :
    m_DisplacementRbar(0.0)
{
}

ScenarioSTA_MANOEUVRE_R_POSITION* ScenarioSTA_MANOEUVRE_R_POSITION::create(const QDomElement& e)
{
    ScenarioSTA_MANOEUVRE_R_POSITION* v;
    if (e.tagName() == "tns:STA_MANOEUVRE_R_POSITION")
    {
        v = new ScenarioSTA_MANOEUVRE_R_POSITION;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioSTA_MANOEUVRE_R_POSITION::load(const QDomElement& e, QDomElement* next)
{
    ScenarioManoeuvreType::load(e, next);
        m_DisplacementRbar = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioSTA_MANOEUVRE_R_POSITION::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioManoeuvreType::toDomElement(doc);
    e.setTagName("STA_MANOEUVRE_R_POSITION");
    {
        QDomElement child = doc.createElement("DisplacementRbar");
        child.appendChild(doc.createTextNode(convertToString(m_DisplacementRbar)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioSTA_MANOEUVRE_V_R_POSITION
ScenarioSTA_MANOEUVRE_V_R_POSITION::ScenarioSTA_MANOEUVRE_V_R_POSITION() :
    m_DisplacementVbar(0.0),
    m_DisplacementRbar(0.0)
{
}

ScenarioSTA_MANOEUVRE_V_R_POSITION* ScenarioSTA_MANOEUVRE_V_R_POSITION::create(const QDomElement& e)
{
    ScenarioSTA_MANOEUVRE_V_R_POSITION* v;
    if (e.tagName() == "tns:STA_MANOEUVRE_V_R_POSITION")
    {
        v = new ScenarioSTA_MANOEUVRE_V_R_POSITION;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioSTA_MANOEUVRE_V_R_POSITION::load(const QDomElement& e, QDomElement* next)
{
    ScenarioManoeuvreType::load(e, next);
        m_DisplacementVbar = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_DisplacementRbar = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioSTA_MANOEUVRE_V_R_POSITION::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioManoeuvreType::toDomElement(doc);
    e.setTagName("STA_MANOEUVRE_V_R_POSITION");
    {
        QDomElement child = doc.createElement("DisplacementVbar");
        child.appendChild(doc.createTextNode(convertToString(m_DisplacementVbar)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("DisplacementRbar");
        child.appendChild(doc.createTextNode(convertToString(m_DisplacementRbar)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioSTA_MANOEUVRE_V_R_DURATION
ScenarioSTA_MANOEUVRE_V_R_DURATION::ScenarioSTA_MANOEUVRE_V_R_DURATION() :
    m_DisplacementVbar(0.0),
    m_DisplacementRbar(0.0),
    m_Duration(0.0)
{
}

ScenarioSTA_MANOEUVRE_V_R_DURATION* ScenarioSTA_MANOEUVRE_V_R_DURATION::create(const QDomElement& e)
{
    ScenarioSTA_MANOEUVRE_V_R_DURATION* v;
    if (e.tagName() == "tns:STA_MANOEUVRE_V_R_DURATION")
    {
        v = new ScenarioSTA_MANOEUVRE_V_R_DURATION;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioSTA_MANOEUVRE_V_R_DURATION::load(const QDomElement& e, QDomElement* next)
{
    ScenarioManoeuvreType::load(e, next);
        m_DisplacementVbar = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_DisplacementRbar = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_Duration = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioSTA_MANOEUVRE_V_R_DURATION::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioManoeuvreType::toDomElement(doc);
    e.setTagName("STA_MANOEUVRE_V_R_DURATION");
    {
        QDomElement child = doc.createElement("DisplacementVbar");
        child.appendChild(doc.createTextNode(convertToString(m_DisplacementVbar)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("DisplacementRbar");
        child.appendChild(doc.createTextNode(convertToString(m_DisplacementRbar)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("Duration");
        child.appendChild(doc.createTextNode(convertToString(m_Duration)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioLagrangianType
ScenarioLagrangianType::ScenarioLagrangianType()
{
}

ScenarioLagrangianType* ScenarioLagrangianType::create(const QDomElement& e)
{
    ScenarioLagrangianType* v;
    if (e.tagName() == "tns:LagrangianType")
    {
        v = new ScenarioLagrangianType;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioLagrangianType::load(const QDomElement& e, QDomElement* next)
{
    ScenarioAbstractTrajectoryType::load(e, next);
    return true;
}

QDomElement ScenarioLagrangianType::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioAbstractTrajectoryType::toDomElement(doc);
    e.setTagName("LagrangianType");
    return e;
}




// ScenarioFlyByType
ScenarioFlyByType::ScenarioFlyByType()
{
}

ScenarioFlyByType* ScenarioFlyByType::create(const QDomElement& e)
{
    ScenarioFlyByType* v;
    if (e.tagName() == "tns:FlyByType")
    {
        v = new ScenarioFlyByType;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioFlyByType::load(const QDomElement& e, QDomElement* next)
{
    ScenarioAbstractTrajectoryType::load(e, next);
    return true;
}

QDomElement ScenarioFlyByType::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioAbstractTrajectoryType::toDomElement(doc);
    e.setTagName("FlyByType");
    return e;
}




// ScenarioSCSystemType
ScenarioSCSystemType::ScenarioSCSystemType()
{
}

ScenarioSCSystemType* ScenarioSCSystemType::create(const QDomElement& e)
{
    ScenarioSCSystemType* v;
    if (e.tagName() == "tns:SCSystemType")
    {
        v = new ScenarioSCSystemType;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioSCSystemType::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
    m_SystemBudgets = QSharedPointer<ScenarioSystemBudgets>(ScenarioSystemBudgets::create(*next));
    *next = next->nextSiblingElement();
    m_SCAerodynamics = QSharedPointer<ScenarioSCAerodynamics>(ScenarioSCAerodynamics::create(*next));
    *next = next->nextSiblingElement();
    m_Propulsion = QSharedPointer<ScenarioPropulsion>(ScenarioPropulsion::create(*next));
    *next = next->nextSiblingElement();
    m_Structure = QSharedPointer<ScenarioStructure>(ScenarioStructure::create(*next));
    *next = next->nextSiblingElement();
    m_TCS = QSharedPointer<ScenarioTCS>(ScenarioTCS::create(*next));
    *next = next->nextSiblingElement();
    m_EPS = QSharedPointer<ScenarioEPS>(ScenarioEPS::create(*next));
    *next = next->nextSiblingElement();
    m_TTC = QSharedPointer<ScenarioTTC>(ScenarioTTC::create(*next));
    *next = next->nextSiblingElement();
    m_AOCS = QSharedPointer<ScenarioAOCS>(ScenarioAOCS::create(*next));
    *next = next->nextSiblingElement();
    m_OBDH = QSharedPointer<ScenarioOBDH>(ScenarioOBDH::create(*next));
    *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioSCSystemType::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("SCSystemType");
    if (!m_SystemBudgets.isNull())
    {
        QDomElement child = m_SystemBudgets->toDomElement(doc);
        child.setTagName("SystemBudgets");
        e.appendChild(child);
    }
    if (!m_SCAerodynamics.isNull())
    {
        QDomElement child = m_SCAerodynamics->toDomElement(doc);
        child.setTagName("SCAerodynamics");
        e.appendChild(child);
    }
    if (!m_Propulsion.isNull())
    {
        QDomElement child = m_Propulsion->toDomElement(doc);
        child.setTagName("Propulsion");
        e.appendChild(child);
    }
    if (!m_Structure.isNull())
    {
        QDomElement child = m_Structure->toDomElement(doc);
        child.setTagName("Structure");
        e.appendChild(child);
    }
    if (!m_TCS.isNull())
    {
        QDomElement child = m_TCS->toDomElement(doc);
        child.setTagName("TCS");
        e.appendChild(child);
    }
    if (!m_EPS.isNull())
    {
        QDomElement child = m_EPS->toDomElement(doc);
        child.setTagName("EPS");
        e.appendChild(child);
    }
    if (!m_TTC.isNull())
    {
        QDomElement child = m_TTC->toDomElement(doc);
        child.setTagName("TTC");
        e.appendChild(child);
    }
    if (!m_AOCS.isNull())
    {
        QDomElement child = m_AOCS->toDomElement(doc);
        child.setTagName("AOCS");
        e.appendChild(child);
    }
    if (!m_OBDH.isNull())
    {
        QDomElement child = m_OBDH->toDomElement(doc);
        child.setTagName("OBDH");
        e.appendChild(child);
    }
    return e;
}




// ScenarioSystemBudgets
ScenarioSystemBudgets::ScenarioSystemBudgets()
{
}

ScenarioSystemBudgets* ScenarioSystemBudgets::create(const QDomElement& e)
{
    ScenarioSystemBudgets* v;
    if (e.tagName() == "tns:SystemBudgets")
    {
        v = new ScenarioSystemBudgets;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioSystemBudgets::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
    m_Mass = QSharedPointer<ScenarioMass>(ScenarioMass::create(*next));
    *next = next->nextSiblingElement();
    m_Power = QSharedPointer<ScenarioPower>(ScenarioPower::create(*next));
    *next = next->nextSiblingElement();
    m_Link = QSharedPointer<ScenarioLink>(ScenarioLink::create(*next));
    *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioSystemBudgets::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("SystemBudgets");
    if (!m_Mass.isNull())
    {
        QDomElement child = m_Mass->toDomElement(doc);
        child.setTagName("Mass");
        e.appendChild(child);
    }
    if (!m_Power.isNull())
    {
        QDomElement child = m_Power->toDomElement(doc);
        child.setTagName("Power");
        e.appendChild(child);
    }
    if (!m_Link.isNull())
    {
        QDomElement child = m_Link->toDomElement(doc);
        child.setTagName("Link");
        e.appendChild(child);
    }
    return e;
}




// ScenarioMass
ScenarioMass::ScenarioMass() :
    m_dryMass(0.0),
    m_wetMass(0.0)
{
}

ScenarioMass* ScenarioMass::create(const QDomElement& e)
{
    ScenarioMass* v;
    if (e.tagName() == "tns:Mass")
    {
        v = new ScenarioMass;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioMass::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
        m_dryMass = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_wetMass = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioMass::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("Mass");
    {
        QDomElement child = doc.createElement("dryMass");
        child.appendChild(doc.createTextNode(convertToString(m_dryMass)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("wetMass");
        child.appendChild(doc.createTextNode(convertToString(m_wetMass)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioPower
ScenarioPower::ScenarioPower() :
    m_totalPowerBoL(0.0),
    m_totalPowerEoL(0.0)
{
}

ScenarioPower* ScenarioPower::create(const QDomElement& e)
{
    ScenarioPower* v;
    if (e.tagName() == "tns:Power")
    {
        v = new ScenarioPower;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioPower::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
        m_totalPowerBoL = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_totalPowerEoL = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioPower::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("Power");
    {
        QDomElement child = doc.createElement("totalPowerBoL");
        child.appendChild(doc.createTextNode(convertToString(m_totalPowerBoL)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("totalPowerEoL");
        child.appendChild(doc.createTextNode(convertToString(m_totalPowerEoL)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioLink
ScenarioLink::ScenarioLink() :
    m_uplinkMargin(0.0),
    m_downlinkMargin(0.0)
{
}

ScenarioLink* ScenarioLink::create(const QDomElement& e)
{
    ScenarioLink* v;
    if (e.tagName() == "tns:Link")
    {
        v = new ScenarioLink;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioLink::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
        m_uplinkMargin = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_downlinkMargin = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioLink::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("Link");
    {
        QDomElement child = doc.createElement("uplinkMargin");
        child.appendChild(doc.createTextNode(convertToString(m_uplinkMargin)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("downlinkMargin");
        child.appendChild(doc.createTextNode(convertToString(m_downlinkMargin)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioSCAerodynamics
ScenarioSCAerodynamics::ScenarioSCAerodynamics() :
    m_surfaceArea(0.0),
    m_Cd(0.0)
{
}

ScenarioSCAerodynamics* ScenarioSCAerodynamics::create(const QDomElement& e)
{
    ScenarioSCAerodynamics* v;
    if (e.tagName() == "tns:SCAerodynamics")
    {
        v = new ScenarioSCAerodynamics;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioSCAerodynamics::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
        m_surfaceArea = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_Cd = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioSCAerodynamics::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("SCAerodynamics");
    {
        QDomElement child = doc.createElement("surfaceArea");
        child.appendChild(doc.createTextNode(convertToString(m_surfaceArea)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("Cd");
        child.appendChild(doc.createTextNode(convertToString(m_Cd)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioPropulsion
ScenarioPropulsion::ScenarioPropulsion() :
    m_numberOfEngines(0),
    m_thrustPerEngine(0.0),
    m_specificImpulse(0.0),
    m_propellantMass(0.0),
    m_totalPropulsionDryMass(0.0)
{
}

ScenarioPropulsion* ScenarioPropulsion::create(const QDomElement& e)
{
    ScenarioPropulsion* v;
    if (e.tagName() == "tns:Propulsion")
    {
        v = new ScenarioPropulsion;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioPropulsion::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
        m_numberOfEngines = parseInt(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_thrustPerEngine = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_specificImpulse = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_propellantMass = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
        m_totalPropulsionDryMass = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioPropulsion::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("Propulsion");
    {
        QDomElement child = doc.createElement("numberOfEngines");
        child.appendChild(doc.createTextNode(convertToString(m_numberOfEngines)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("thrustPerEngine");
        child.appendChild(doc.createTextNode(convertToString(m_thrustPerEngine)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("specificImpulse");
        child.appendChild(doc.createTextNode(convertToString(m_specificImpulse)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("propellantMass");
        child.appendChild(doc.createTextNode(convertToString(m_propellantMass)));
        e.appendChild(child);
    }
    {
        QDomElement child = doc.createElement("totalPropulsionDryMass");
        child.appendChild(doc.createTextNode(convertToString(m_totalPropulsionDryMass)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioStructure
ScenarioStructure::ScenarioStructure() :
    m_totalStructureMass(0.0)
{
}

ScenarioStructure* ScenarioStructure::create(const QDomElement& e)
{
    ScenarioStructure* v;
    if (e.tagName() == "tns:Structure")
    {
        v = new ScenarioStructure;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioStructure::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
        m_totalStructureMass = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioStructure::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("Structure");
    {
        QDomElement child = doc.createElement("totalStructureMass");
        child.appendChild(doc.createTextNode(convertToString(m_totalStructureMass)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioTCS
ScenarioTCS::ScenarioTCS() :
    m_totalTCSMass(0.0)
{
}

ScenarioTCS* ScenarioTCS::create(const QDomElement& e)
{
    ScenarioTCS* v;
    if (e.tagName() == "tns:TCS")
    {
        v = new ScenarioTCS;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioTCS::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
        m_totalTCSMass = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioTCS::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("TCS");
    {
        QDomElement child = doc.createElement("totalTCSMass");
        child.appendChild(doc.createTextNode(convertToString(m_totalTCSMass)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioEPS
ScenarioEPS::ScenarioEPS() :
    m_totalEPSMass(0.0)
{
}

ScenarioEPS* ScenarioEPS::create(const QDomElement& e)
{
    ScenarioEPS* v;
    if (e.tagName() == "tns:EPS")
    {
        v = new ScenarioEPS;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioEPS::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
        m_totalEPSMass = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioEPS::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("EPS");
    {
        QDomElement child = doc.createElement("totalEPSMass");
        child.appendChild(doc.createTextNode(convertToString(m_totalEPSMass)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioTTC
ScenarioTTC::ScenarioTTC() :
    m_totalTTCMass(0.0)
{
}

ScenarioTTC* ScenarioTTC::create(const QDomElement& e)
{
    ScenarioTTC* v;
    if (e.tagName() == "tns:TTC")
    {
        v = new ScenarioTTC;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioTTC::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
        m_totalTTCMass = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    for (;;)
    {
        QSharedPointer<ScenarioCommunicationAntenna> v(ScenarioCommunicationAntenna::create(*next));
        if (v.isNull()) break; else {
            m_CommunicationAntenna << v;
            *next = next->nextSiblingElement();
        }
    }
    return true;
}

QDomElement ScenarioTTC::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("TTC");
    {
        QDomElement child = doc.createElement("totalTTCMass");
        child.appendChild(doc.createTextNode(convertToString(m_totalTTCMass)));
        e.appendChild(child);
    }
    foreach (QSharedPointer<ScenarioCommunicationAntenna> p, m_CommunicationAntenna)
    {
        e.appendChild(p->toDomElement(doc));
    }
    return e;
}




// ScenarioAOCS
ScenarioAOCS::ScenarioAOCS() :
    m_totalAOCSMass(0.0)
{
}

ScenarioAOCS* ScenarioAOCS::create(const QDomElement& e)
{
    ScenarioAOCS* v;
    if (e.tagName() == "tns:AOCS")
    {
        v = new ScenarioAOCS;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioAOCS::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
        m_totalAOCSMass = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioAOCS::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("AOCS");
    {
        QDomElement child = doc.createElement("totalAOCSMass");
        child.appendChild(doc.createTextNode(convertToString(m_totalAOCSMass)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioOBDH
ScenarioOBDH::ScenarioOBDH() :
    m_totalOBDHMass(0.0)
{
}

ScenarioOBDH* ScenarioOBDH::create(const QDomElement& e)
{
    ScenarioOBDH* v;
    if (e.tagName() == "tns:OBDH")
    {
        v = new ScenarioOBDH;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioOBDH::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
        m_totalOBDHMass = parseDouble(next->firstChild().toText().data());
        *next = next->nextSiblingElement();
    return true;
}

QDomElement ScenarioOBDH::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("OBDH");
    {
        QDomElement child = doc.createElement("totalOBDHMass");
        child.appendChild(doc.createTextNode(convertToString(m_totalOBDHMass)));
        e.appendChild(child);
    }
    return e;
}




// ScenarioSpaceScenario
ScenarioSpaceScenario::ScenarioSpaceScenario()
{
}

ScenarioSpaceScenario* ScenarioSpaceScenario::create(const QDomElement& e)
{
    ScenarioSpaceScenario* v;
    if (e.tagName() == "tns:SpaceScenario")
    {
        v = new ScenarioSpaceScenario;
        QDomElement nextElement = e.firstChildElement();
        v->load(e, &nextElement);
        return v;
    }
    return NULL;
}

bool ScenarioSpaceScenario::load(const QDomElement& e, QDomElement* next)
{
    ScenarioObject::load(e, next);
    for (;;)
    {
        QSharedPointer<ScenarioParticipantType> v(ScenarioParticipantType::create(*next));
        if (v.isNull()) break; else {
            m_AbstractParticipant << v;
            *next = next->nextSiblingElement();
        }
    }
    return true;
}

QDomElement ScenarioSpaceScenario::toDomElement(QDomDocument& doc) const
{
    QDomElement e = ScenarioObject::toDomElement(doc);
    e.setTagName("SpaceScenario");
    foreach (QSharedPointer<ScenarioParticipantType> p, m_AbstractParticipant)
    {
        e.appendChild(p->toDomElement(doc));
    }
    return e;
}




